readr::write_file( htmloutput, "htmloutput.html")
utils::browseURL("htmloutput.html")
to_html <- function(tidy_model) {
rle_1   <-   rle(tidy_model$variables)
rle_1$values[  which( rle_1$lengths == 1 )  ]  <- "&nbsp;" # single rows dont nead rgroup header
to_html <- tidy_model %>% select( categories, estimate, conf.low, conf.high )
htmlTable::htmlTable(
tidy_model ,
rnames   = FALSE,
rgroup   = rle_1$values,
n.rgroup = rle_1$lengths,
align    = c("l","r")
)
}
to_html(tidy_model) -> htmloutput
readr::write_file( htmloutput, "htmloutput.html")
utils::browseURL("htmloutput.html")
tidy_model
tidy_model %>%
transmute( variables, caegories)
tidy_model %>%
transmute( variables, categories)
tidy_model %>%
transmute( variables,
categories,
estimate = round( estimate, 2) )
decimals_estimate <- 2
tidy_model %>%
transmute( variables,
categories,
estimate = round( estimate, decimals_estimate ) )
tidy_model %>% head()
round( 2.10)
round( c( 2.10, 2.11 )  )
round( c( 2.10, 2.11 ), digits = 2  )
round( c( 2.10, 2.11 ), digits = 3  )
to_html <- function(tidy_model) {
rle_1   <-   rle(tidy_model$variables)
rle_1$values[  which( rle_1$lengths == 1 )  ]  <- "&nbsp;" # single rows dont nead rgroup header
to_html <- tidy_model %>% select( categories, estimate, conf.low, conf.high )
htmlTable::htmlTable(
tidy_model ,
rnames   = FALSE,
rgroup   = rle_1$values,
n.rgroup = rle_1$lengths,
align    = c("l","r")
)
}
to_html(tidy_model) -> htmloutput
readr::write_file( htmloutput, "htmloutput.html")
utils::browseURL("htmloutput.html")
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
HR = round( estimate, decimals_estimate ),
conf.low, "-" conf.high )
)
tidy_model %>% head()
}
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
HR = round( estimate, decimals_estimate ),
CI = paste0( round( conf.low, decimals_estimate), "-", round( conf.high, decimals_estimate )
)
tidy_model %>% head()
}
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
HR = round( estimate, decimals_estimate ),
CI = paste0( round( conf.low, decimals_estimate), "-", round( conf.high, decimals_estimate ) )
)
tidy_model %>% head()
}
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
HR = round( estimate, decimals_estimate ),
CI = paste0( round( conf.low, decimals_estimate), "-", round( conf.high, decimals_estimate ) )
)
tidy_model %>% head()
}
tidy_up_model_df(model1)
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
HR = round( estimate, decimals_estimate ),
CI = paste0( round( conf.low, decimals_estimate), "-", round( conf.high, decimals_estimate ) )
)
}
tidy_up_model_df(model1)
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
HR = round( estimate, decimals_estimate ),
CI = paste0( round( conf.low, decimals_estimate), "-", round( conf.high, decimals_estimate ) )
conf.low,
)
}
tidy_up_model_df(model1)
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
HR = round( estimate, decimals_estimate ),
CI = paste0( round( conf.low, decimals_estimate), "-", round( conf.high, decimals_estimate ) ),
conf.low
)
}
tidy_up_model_df(model1)
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
HR = round( estimate, decimals_estimate ),
CI = paste0( format( round( conf.low, decimals_estimate),nsmall= decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate )) ,
)
}
tidy_up_model_df(model1)
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
HR = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low, decimals_estimate),nsmall= decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate )) ,
)
}
model1
tidy_up_model_df(tidy_model)
tidy_model
tidy_up_model_df(tidy_model)
univariate_models_list
model_to_html <- function( univariate_models_list, model_class = "coxph", simple = TRUE, decimals_estimate = 2 ) {
if(  !class(univariate_models_list)=="list") {
stop ("univariate_models_list must be a list")
}
if(model_class == "coxph") {
purrr::map( univariate_models_list, class ) %>%
purrr::map( function(x) "coxph" %in% x ) %>%
unlist() %>%
all() -> are_all_models_coxph
if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
}
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
HR = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low, decimals_estimate),nsmall= decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate )) ,
)
}
univariate_models_list %>%
purrr::map(  add_reference_levels )  %>% bind_rows() -> univariate_models
univariate_models
}
model_to_html( model1)
model_to_html( unlist( model1) )
model1
model_to_html( list( model1) )
model_to_html <- function( univariate_models_list, model_class = "coxph", simple = TRUE, decimals_estimate = 2 ) {
if(  !class(univariate_models_list)=="list") {
stop ("univariate_models_list must be a list")
}
if(model_class == "coxph") {
purrr::map( univariate_models_list, class ) %>%
purrr::map( function(x) "coxph" %in% x ) %>%
unlist() %>%
all() -> are_all_models_coxph
if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
}
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
HR = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low, decimals_estimate),nsmall= decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate )) ,
)
}
univariate_models_list %>%
purrr::map(  add_reference_levels )  %>% bind_rows() -> univariate_models
univariate_models %>% tidy_up_model_df()
}
model_to_html( list( model1) )
library(stringr)
stringr::str_match( names(iris), pattern = "s")
stringr::str_replace_all( names(iris), pattern = "s" )
stringr::str_replace_all( names(iris), pattern = "s", replacement = "asdf" )
univariate_models %>% tidy_up_model_df()
model_to_html( list( model1) )
model_to_html( list( model1) ) -> out11
stringr::str_detect(  string = out11$categories,  "NA", "1")
stringr::str_detect(  string = out11$categories,  pattern =  "NA")
out11$categories
stringr::str_detect(  string = out11$terms,  pattern =  "NA")
stringr::str_detect(  string = out11$HR,  pattern =  "NA")
tidy_up_model_df(tidy_model)
tidy_up_model_df(tidy_model) -> temp_test
temp_test
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
estimate = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low, decimals_estimate),nsmall= decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate )) ,
) %>%
}
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
estimate = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low, decimals_estimate),nsmall= decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate )) ,
) %>%
}
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
estimate = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low, decimals_estimate),nsmall= decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate )) ,
)
}
tidy_up_model_df(tidy_model) -> temp_test
stringr::str_detect(  string = temp_test$estimate,  pattern =  "NA")
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
estimate = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low, decimals_estimate),nsmall= decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate )) ,
) %>%
mutate( estimate = if_else( "NA" %in% estimate, true = "1", false = estimate ))
}
tidy_up_model_df(tidy_model)
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
estimate = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low, decimals_estimate),nsmall= decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate )) ,
) %>%
mutate( estimate = if_else( "NA" %in% estimate, true = "1" )  )
}
tidy_up_model_df(tidy_model)
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
estimate = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low, decimals_estimate),nsmall= decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate )) ,
) %>%
mutate( estimate = case_when( "NA" %in% estimate ~  "1" )  )
}
tidy_up_model_df(tidy_model)
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
estimate = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low, decimals_estimate),nsmall= decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate )) ,
) %>%
mutate( estimate2 = case_when( "NA" %in% estimate ~  "1" )  )
}
tidy_up_model_df(tidy_model)
tidy_up_model_df(tidy_model)
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
estimate = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low, decimals_estimate),nsmall= decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate )) ,
)  -> tidy_model
tidy_model$estimate[ stringr::str_detect(  string = tidy_model$estimate,  pattern =  "NA") ] <- "1"
tidy_model
}
tidy_up_model_df(tidy_model)
tidy_up_model_df <- function(univariate_models) {
tidy_model %>%
transmute( variables,
categories,
estimate = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low, decimals_estimate),nsmall= decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate )) ,
)  -> tidy_model
tidy_model$estimate[ stringr::str_detect(  string = tidy_model$estimate,  pattern =  "NA") ] <- "1"
tidy_model$CI[ stringr::str_detect(  string = tidy_model$CI,  pattern =  "NA") ]             <- "Ref"
tidy_model
}
tidy_up_model_df(tidy_model)
tidy_up_model_df <- function(univariate_models) {
univariate_models %>%
transmute( variables,
categories,
estimate = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low, decimals_estimate),nsmall= decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate )) ,
)  -> tidy_model
tidy_model$estimate[ stringr::str_detect(  string = tidy_model$estimate,  pattern =  "NA") ] <- "1"
tidy_model$CI[ stringr::str_detect(  string = tidy_model$CI,  pattern =  "NA") ]             <- "Ref"
tidy_model
}
tidy_model
tidy_up_model_df(tidy_model)
to_html <- function(tidy_model) {
rle_1   <-   rle(tidy_model$variables)
rle_1$values[  which( rle_1$lengths == 1 )  ]  <- "&nbsp;" # single rows dont nead rgroup header
htmlTable::htmlTable(
tidy_model ,
rnames   = FALSE,
rgroup   = rle_1$values,
n.rgroup = rle_1$lengths,
align    = c("l","r")
)
}
model_to_html <- function( univariate_models_list, model_class = "coxph", simple = TRUE, decimals_estimate = 2 ) {
if(  !class(univariate_models_list)=="list") {
stop ("univariate_models_list must be a list")
}
if(model_class == "coxph") {
purrr::map( univariate_models_list, class ) %>%
purrr::map( function(x) "coxph" %in% x ) %>%
unlist() %>%
all() -> are_all_models_coxph
if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
}
tidy_up_model_df <- function(univariate_models) {
univariate_models %>%
transmute( variables,
categories,
estimate = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low, decimals_estimate),nsmall= decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate )) ,
)  -> tidy_model
tidy_model$estimate[ stringr::str_detect(  string = tidy_model$estimate,  pattern =  "NA") ] <- "1"
tidy_model$CI[ stringr::str_detect(  string = tidy_model$CI,  pattern =  "NA") ]             <- "Ref"
tidy_model
}
to_html <- function(tidy_model) {
rle_1   <-   rle(tidy_model$variables)
rle_1$values[  which( rle_1$lengths == 1 )  ]  <- "&nbsp;" # single rows dont nead rgroup header
htmlTable::htmlTable(
tidy_model ,
rnames   = FALSE,
rgroup   = rle_1$values,
n.rgroup = rle_1$lengths,
align    = c("l","r")
)
}
to_html(tidy_model)
}
tidy_up_model_df(tidy_model)
model_to_html(list(model1))
readr::write_file( tidy_model, "asdf.html")
model_to_html( list(model1  ) ) -> tidy_model
readr::write_file( tidy_model, "asdf.html")
utils::browseURL("asdf.html")
to_html(tidy_model) -> htmloutput
readr::write_file( htmloutput, "htmloutput.html")
utils::browseURL("htmloutput.html")
model_to_html <- function( univariate_models_list, model_class = "coxph", simple = TRUE, decimals_estimate = 2 ) {
if(  !class(univariate_models_list)=="list") {
stop ("univariate_models_list must be a list")
}
if(model_class == "coxph") {
purrr::map( univariate_models_list, class ) %>%
purrr::map( function(x) "coxph" %in% x ) %>%
unlist() %>%
all() -> are_all_models_coxph
if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
}
tidy_up_model_df <- function(univariate_models) {
univariate_models %>%
transmute( variables,
categories,
estimate = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low, decimals_estimate),nsmall= decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate )) ,
)  -> tidy_model
tidy_model$estimate[ stringr::str_detect(  string = tidy_model$estimate,  pattern =  "NA") ] <- "1"
tidy_model$CI[ stringr::str_detect(  string = tidy_model$CI,  pattern =  "NA") ]             <- "Ref"
tidy_model
}
to_html <- function(tidy_model) {
rle_1   <-   rle(tidy_model$variables)
rle_1$values[  which( rle_1$lengths == 1 )  ]  <- "&nbsp;" # single rows dont nead rgroup header
htmlTable::htmlTable(
tidy_model ,
rnames   = FALSE,
rgroup   = rle_1$values,
n.rgroup = rle_1$lengths,
align    = c("l","r")
)
}
tidy_up_model_df(univariate_models) %>%
to_html()
}
model_to_html(list(model1))
model_to_html <- function( univariate_models_list, model_class = "coxph", simple = TRUE, decimals_estimate = 2 ) {
if(  !class(univariate_models_list)=="list") {
stop ("univariate_models_list must be a list")
}
if(model_class == "coxph") {
purrr::map( univariate_models_list, class ) %>%
purrr::map( function(x) "coxph" %in% x ) %>%
unlist() %>%
all() -> are_all_models_coxph
if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
}
tidy_up_model_df <- function(univariate_models) {
univariate_models %>%
transmute( variables,
categories,
estimate = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low, decimals_estimate),nsmall= decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate )) ,
)  -> tidy_model
tidy_model$estimate[ stringr::str_detect(  string = tidy_model$estimate,  pattern =  "NA") ] <- "1"
tidy_model$CI[ stringr::str_detect(  string = tidy_model$CI,  pattern =  "NA") ]             <- "Ref"
tidy_model
}
to_html <- function(tidy_model) {
rle_1   <-   rle(tidy_model$variables)
rle_1$values[  which( rle_1$lengths == 1 )  ]  <- "&nbsp;" # single rows dont nead rgroup header
htmlTable::htmlTable(
tidy_model ,
rnames   = FALSE,
rgroup   = rle_1$values,
n.rgroup = rle_1$lengths,
align    = c("l","r")
)
}
add_reference_levels(univariate_models) %>%
tidy_up_model_df() %>%
to_html()
}
model_to_html(list(model1))
model_to_html <- function( univariate_models_list, model_class = "coxph", simple = TRUE, decimals_estimate = 2 ) {
if(  !class(univariate_models_list)=="list") {
stop ("univariate_models_list must be a list")
}
if(model_class == "coxph") {
purrr::map( univariate_models_list, class ) %>%
purrr::map( function(x) "coxph" %in% x ) %>%
unlist() %>%
all() -> are_all_models_coxph
if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
}
tidy_up_model_df <- function(univariate_models) {
univariate_models %>%
transmute( variables,
categories,
estimate = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low, decimals_estimate),nsmall= decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate )) ,
)  -> tidy_model
tidy_model$estimate[ stringr::str_detect(  string = tidy_model$estimate,  pattern =  "NA") ] <- "1"
tidy_model$CI[ stringr::str_detect(  string = tidy_model$CI,  pattern =  "NA") ]             <- "Ref"
tidy_model
}
to_html <- function(tidy_model) {
rle_1   <-   rle(tidy_model$variables)
rle_1$values[  which( rle_1$lengths == 1 )  ]  <- "&nbsp;" # single rows dont nead rgroup header
htmlTable::htmlTable(
tidy_model ,
rnames   = FALSE,
rgroup   = rle_1$values,
n.rgroup = rle_1$lengths,
align    = c("l","r")
)
}
add_reference_levels(univariate_models_list) %>%
tidy_up_model_df() %>%
to_html()
}
model_to_html(list(model1))
