dplyr::group_by(rlang::UQ(by_group_symbol)) %>%
dplyr::do("by_group_var" = freq_function(., var_vector))  %>%  tidyr::unnest()  %>%
dplyr::group_by(rlang::UQ(by_group_symbol)) %>%
dplyr::do(data = (.)) %>% dplyr::select(data) %>%  purrr::flatten() %>%
purrr::map(
.,
.f = function(x)  {
names(x)[names(x) %in% c("pct", "n")] <-
paste0(names(x)[names(x) %in% c("pct", "n")], "_", x[1, 1])
x[, -1]
}
) %>%
Reduce(function(x, y)
dplyr::full_join(x, y,  by = c( "variable", "category" )), .) -> table1
)
if (rlang::is_true(include_total)) {
dataset %>% freq_function(var_vector)    -> table0
table0 <- dplyr::rename(table0, "n_total" = n, "pct_total" = pct)
table1 <- dplyr::full_join(table0, table1, by = c("variable", "category"))
}
} else {
dataset %>%
freq_function(var_vector)    -> table1
include_total <- FALSE
}
if (htmlout == FALSE) { table1 }   else {
alignment_vektor <- c("l", rep(x = "r", ncol(table1) - 1))
# rgroup names andd length
rle_vektor                    <- rle(table1$variable)
rgroup_vektor                 <- rle_vektor$values
rgroup_vektor                 <- stringr::str_to_title(rgroup_vektor)
n_rgroup_vektor               <- rle_vektor$lengths
if (!rlang::is_null(by_group)) {
# cgroup names and lengths
if (rlang::is_true(include_total)) {
number_of_summaries_in_table  <- 1 + length(by_group_test_levels)
c_group_vektor                <- c(" ",  c("Total", by_group_test_levels))
} else  {
number_of_summaries_in_table <- length(by_group_test_levels)
c_group_vektor               <- c(" ",  c(by_group_test_levels))
}
n_c_group_vektor <- c(1,  rep(2, number_of_summaries_in_table))
} else if( rlang::is_null(by_group)){
number_of_summaries_in_table    <- 1
c_group_vektor                  <- c(" ", " ")
n_c_group_vektor                <- c(1, 2)
}
table1 <- table1[, -1] # exclude first column, because it is shown in the rgroup.
names(table1) <-
c(" ", rep(c("n", "(%)"), number_of_summaries_in_table))
css_matrix     <-
matrix(data = "padding-left: 0.5cm; padding-right: 0.5cm;",
nrow = nrow(table1),
ncol = ncol(table1))
css_matrix[, 1] <-
"padding-left: 0.4cm; padding-right: 0.3cm;"
htmlTable::htmlTable(
x =  table1,
rnames = FALSE,
cgroup   = c_group_vektor,
n.cgroup = n_c_group_vektor,
rgroup   = rgroup_vektor,
n.rgroup = n_rgroup_vektor,
align = alignment_vektor,
css.rgroup = "font-style: italic;padding-top: 0.4cm;padding-right: 0.4cm;padding-bottom: 0.2cm;",
css.cell = css_matrix
)
}
}
freq_by( diamonds, c("cut", "clarity"),  include_total = FALSE ) -> out1
readr::write_file( out1, path = "c:/Users/rahela/Desktop/out.html")
freq_by( diamonds, c("cut", "clarity", "color"),  include_total = FALSE ) -> out1
out1
readr::write_file( out1, path = "c:/Users/rahela/Desktop/out.html")
diamonds
freq_by( diamonds, c("cut", "clarity", "color"), by_group = "cut",  include_total = FALSE ) -> out1
readr::write_file( out1, path = "c:/Users/rahela/Desktop/out.html")
freq_by( diamonds, c("cut", "clarity", "color"),  include_total = FALSE ) -> out1
out1
readr::write_file( out1, path = "c:/Users/rahela/Desktop/out.html")
library(epi1)
library(epi1)
epi1::freq_by(mtcars, c("cyl", "gear", "am"))
library(dplyr)
epi1::freq_by(mtcars, c("cyl", "gear", "am"))
library(htmlTable)
sessionInfo()
library(epi1)
library(epi1)
library(epi1)
freq_by( dataset = diamonds,  var_vector = c("cut", "clarity"), by_group = "color")
freq_by( dataset = ggplot2::diamonds,  var_vector = c("cut", "clarity"), by_group = "color")
devtools::use_vignette("epi1-vignette")
library(epi1)
library(epi1)
library(ggplot2)
diamonds
freq_by(dataset = diamonds, var_vector = c("color", "clarity"), "color" )
install.packages("htmlTable")
freq_by(dataset = diamonds, var_vector = c("color", "clarity"), "color" )
library(ggplot2)
library(dplyr)
diamonds$group1 <- sample( x = c("A1", "A2"), size = nrow(diamonds), replace = TRUE )
freq_by(dataset = diamonds, var_vector = c("color", "clarity", "color"), "group1" )
diamonds$group1 <- factor( diamonds$group1 )
freq_by(dataset = diamonds, var_vector = c("color", "clarity", "color"), "group1" )
library(epi1)
diamonds
freq_by(dataset = diamonds, var_vector = c( "clarity", "color"), "cut" )
freq_by(dataset = diamonds, var_vector = c("color", "clarity"), "cut" )
library(epi1)
library(epi1)
library(epi1)
library(epi1)
library(epi1)
head(diamonds)
Outputs HTML:
freq_by( dataset = ggplot2::diamonds,  var_vector = c("cut", "clarity"), by_group = "color") -> output
library(dplyr)
Outputs HTML:
freq_by( dataset = ggplot2::diamonds,  var_vector = c("cut", "clarity"), by_group = "color") -> output
readr::write_file( output, "output_example.html")
viewer <- getOption("viewer")
viewer(output)
viewer("output_example.html")
viewer("output")
viewer(output)
viewer(output)
tempDir <- tempfile()
dir.create(tempDir)
viewer(output)
tempDir <- tempfile()
dir.create(tempDir)
htmlFile <- file.path(tempDir, "index.html")
view_kable <- function(x, ...){
tab <- paste(capture.output(kable(x, ...)), collapse = '\n')
tf <- tempfile(fileext = ".html")
writeLines(tab, tf)
rstudio::viewer(tf)
}
view_kable(head(iris[,1:9]), format = 'html', table.attr = "class=nofluid")
library(knitr)
view_kable <- function(x, ...){
tab <- paste(capture.output(kable(x, ...)), collapse = '\n')
tf <- tempfile(fileext = ".html")
writeLines(tab, tf)
rstudio::viewer(tf)
}
view_kable(head(iris[,1:9]), format = 'html', table.attr = "class=nofluid")
view_kable(head(iris[,]), format = 'html', table.attr = "class=nofluid")
viewer("output_example.html")
library(epi1)
freq_by()
library(epi1)
library(epi1)
library(epi1)
library(epi1)
devtools::load_all()
sessionInfo()
library(epi1)
library(epi1)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::use_data(ggplot2::diamonds, example_data)
example_data <- ggplot2::diamonds
devtools::use_data(example_data, example_data)
load("C:/Users/rahela/Desktop/epi1/data/example_data.rda")
example_data
devtools::create()
devtools::use_data()
vignette("epi1")
vignette(epi1)
vignette("index.html")
vignette("Epi1vignette")
vignette(Epi1vignette)
vignette("epi1")
browseVignettes("epi1")
devtools::use_vignette("my-vignette")
devtools::use_vignette("epi1_vignette")
library(epi1)
vignette("epi1")
vignette("my-vignette")
vignette("Epi1")
vignette("epi1_vignette")
library(epi1)
vignette("epi1")
detach("package:epi1", unload = TRUE )
install.packages("C:/Users/rahela/Desktop/epi1_0.1.0.zip", repos = NULL, type = "win.binary")
library(epi1)
vignette( "broom")
vignette( "broom_and_dplyr")
vignette("epi1_vignette")
vignette("index")
vignette("my-vignette")
devtools::use_vignette("my-vignette2")
vignette("my-vignette2")
vignette("my-vignette2")
vignette("Vignette Title")
library(epi1)
vignette("my-vignette2")
vignette("my-vignette2")
vignette("Vignette Title")
devtools::use_vignette()
epi1
library(epi1)
vignette( package = "epi1")
vignette( package = "epias1")
vignette( package = "epi1")
library(epi1)
detach("package:epi1", unload = TRUE )
install.packages("C:/Users/rahela/Desktop/epi1_0.1.0.zip", repos = NULL, type = "win.binary")
vignette( package = "epi1")
vignette( package = "dplyr")
vignette( package = "epi1")
browseVignettes(package = "epi1")
library(epi1)
browseVignettes(package = "epi1")
browseVignettes(package = "epigh1")
browseVignettes(package = "epi1")
devtools::build_vignettes()
browseVignettes(package = "epi1")
library(epi1)
browseVignettes(package = "epi1")
2+2
library(epi1)
browseVignettes(package = "epi1")
library(epi1)
library(epi1)
vignette(epi1)
library(epi1)
vignette(epi1)
vignette("epi1")
browseVignettes( package = "epi1")
library(epi1)
2+2
browseVignettes( package = "epi1")
library(epi1)
browseVignettes( package = "epi1")
vignette(epi1_vignette)
detach("package:epi1", unload = TRUE )
install.packages("C:/Users/rahela/Desktop/epi1_0.1.0.tar.gz", repos = NULL, type = "source")
devtools::build_vignettes()
library(epi1)
browseVignettes( package = "epi1")
detach("package:epi1", unload = TRUE )
devtools::check()
devtools::check()
library(epi1)
devtools::check()
R CMD
R CMD build
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
install.packages("roxygen2")
detach("package:roxygen2", unload = TRUE )
detach("roxygen2", unload = TRUE )
library(epi1)
library(epi1)
library(epi1)
345
install.packages("roxygen2")
namespace:magrittr
magrittr
library(magrittr)
install.packages("qpdf")
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
lung <- survival::lung
lung$species <- iris$Species[ sample.int( 150, 228, replace = TRUE )]
input_to_function <- survival::coxph( survival::Surv( time, status == 2 ) ~ age +
sex  + ph.karno + wt.loss + species, data =  lung)
add_reference_levels( model_object = input_to_function)
add_reference_levels <- function( model_object ) {
suppressWarnings(
if (   class( model_object ) == "coxph" ) {
inside_list1 <- model_object$xlevels
output_list <- list()
for (i in 1:length(inside_list1) ) {
output_list[[i]] <-  paste0( names(inside_list1[i]),  as.character( unlist( inside_list1[i] )  )  )
}
categorical_covariates <- unlist( output_list)
numeric_covarites <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
all_covariates92681 <- c( categorical_covariates, numeric_covarites )
covariate_df_92681 <- data.frame( term = all_covariates92681)
# the full covariate list is left joined with the statistical values
values_92681 <- broom::tidy(model_object, exponentiate = TRUE )
dplyr::left_join( covariate_df_92681, values_92681, "term" ) -> output_df1
output_df1$xlevels <- as.character( unlist( model_object$xlevels ) )
}
else { print( "Only works with coxph objects")}  )
}
add_reference_levels( model_object = input_to_function)
input_to_function
model_object <- input_to_function
model_object
inside_list1 <- model_object$xlevels
output_list <- list()
output_list
for (i in 1:length(inside_list1) ) {
output_list[[i]] <-  paste0( names(inside_list1[i]),  as.character( unlist( inside_list1[i] )  )  )
}
output_list
categorical_covariates <- unlist( output_list)
categorical_covariates
numeric_covarites <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
all_covariates92681 <- c( categorical_covariates, numeric_covarites )
all_covariates92681
covariate_df_92681 <- data.frame( term = all_covariates92681)
covariate_df_92681
values_92681 <- broom::tidy(model_object, exponentiate = TRUE )
values_92681
dplyr::left_join( covariate_df_92681, values_92681, "term" ) -> output_df1
output_df1
output_df1$xlevels <- as.character( unlist( model_object$xlevels ) )
output_df1
model_object$xlevels
output_df1$xlevels
numeric_covarites
output_df1$xlevels <- c( as.character( unlist( model_object$xlevels ) ),
numeric_covarites )
output_df1
lung <- survival::lung
lung$species <- iris$Species[ sample.int( 150, 228, replace = TRUE )]
input_to_function <- survival::coxph( survival::Surv( time, status == 2 ) ~ age +
add_reference_levels <- function( model_object ) {
suppressWarnings(
if (   class( model_object ) == "coxph" ) {
inside_list1 <- model_object$xlevels
output_list <- list()
for (i in 1:length(inside_list1) ) {
output_list[[i]] <-  paste0( names(inside_list1[i]),  as.character( unlist( inside_list1[i] )  )  )
}
categorical_covariates <- unlist( output_list)
numeric_covarites <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
all_covariates92681 <- c( categorical_covariates, numeric_covarites )
covariate_df_92681 <- data.frame( term = all_covariates92681)
# the full covariate list is left joined with the statistical values
values_92681 <- broom::tidy(model_object, exponentiate = TRUE )
dplyr::left_join( covariate_df_92681, values_92681, "term" ) -> output_df1
output_df1$xlevels <- c( as.character( unlist( model_object$xlevels ) ),
numeric_covarites )
}
else { print( "Only works with coxph objects")}  )
}
lung <- survival::lung
lung$species <- iris$Species[ sample.int( 150, 228, replace = TRUE )]
input_to_function <- survival::coxph( survival::Surv( time, status == 2 ) ~ age +
sex  + ph.karno + wt.loss + species, data =  lung)
add_reference_levels( model_object = input_to_function)
add_reference_levels <- function( model_object ) {
suppressWarnings(
if (   class( model_object ) == "coxph" ) {
inside_list1 <- model_object$xlevels
output_list <- list()
for (i in 1:length(inside_list1) ) {
output_list[[i]] <-  paste0( names(inside_list1[i]),  as.character( unlist( inside_list1[i] )  )  )
}
categorical_covariates <- unlist( output_list)
numeric_covarites <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
all_covariates92681 <- c( categorical_covariates, numeric_covarites )
covariate_df_92681 <- data.frame( term = all_covariates92681)
# the full covariate list is left joined with the statistical values
values_92681 <- broom::tidy(model_object, exponentiate = TRUE )
dplyr::left_join( covariate_df_92681, values_92681, "term" ) -> output_df1
output_df1$xlevels <- c( as.character( unlist( model_object$xlevels ) ),
numeric_covarites )
}
else { print( "Only works with coxph objects")}  )
}
add_reference_levels
add_reference_levels( model_object = input_to_function)
model_object
add_reference_levels <- function( model_object ) {
suppressWarnings(
if (   class( model_object ) == "coxph" ) {
inside_list1 <- model_object$xlevels
output_list <- list()
for (i in 1:length(inside_list1) ) {
output_list[[i]] <-  paste0( names(inside_list1[i]),  as.character( unlist( inside_list1[i] )  )  )
}
categorical_covariates <- unlist( output_list)
numeric_covarites <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
all_covariates92681 <- c( categorical_covariates, numeric_covarites )
covariate_df_92681 <- data.frame( term = all_covariates92681)
# the full covariate list is left joined with the statistical values
values_92681 <- broom::tidy(model_object, exponentiate = TRUE )
dplyr::left_join( covariate_df_92681, values_92681, "term" ) -> output_df1
output_df1$xlevels <- c( as.character( unlist( model_object$xlevels ) ),
numeric_covarites )
output_df1
}
else { print( "Only works with coxph objects")}  )
}
add_reference_levels( model_object = input_to_function)
output <- "asdf"
readr::write_file( output, "output_example.html")
viewer <- getOption("viewer")
viewer("output_example.html")
utils::browseURL("output_example.html")
library(epi1)
library(epi1)
2+2
data <- example_data[ example_data$cut %in% c("Premium", "Ideal"), ]
freq_by(data, c("clarity", "color"), by_group = "cut") -> output
readr::write_file( output, "asdf.html")
utils::browseURL("asdf.html")
freq_by( example_data[ example_data$cut %in% c("Premium", "Ideal"),   ], c("clarity", "color"), by_group = "cut") -> output
readr::write_file( output, "asdf.html")
utils::browseURL("asdf.html")
library(epitable)
freq_by( diamonds, "cut", "color")
library(epitable)
library(epitable)
check(cleanup = FALSE,args = c('--no-examples'),manual = TRUE,path = getwd())
install.packages("C:/Users/rahela/Desktop/epitable_0.1.0.zip", repos = NULL, type = "win.binary")
library(epitable)
library(data.table)
install.packages("data.table")
library(data.table)
library(epitable)
library(epitable)
freq_by(mtcars, "cyl", "am")
mtcars$am <- factor( mtcars$am)
freq_by(mtcars, "cyl", "am")
readr::write_file( freq_by(mtcars, "cyl", "am"), "asdf.html" )
utils::browseURL("asdf.html")
library(tidyverse )
diamonds
freq_by(diamonds, c("cut", "color"), "clarity")
readr::write_file( output, "asdf.html" )
output <- freq_by(diamonds, c("cut", "color"), "clarity")
readr::write_file( output, "asdf.html" )
utils::browseURL("asdf.html")
output <- freq_by(diamonds %>% filter( cut == "Fair"), c("cut", "color"), "clarity")
readr::write_file( output, "asdf.html" )
utils::browseURL("asdf.html")
temp1 <- tempfile(pattern = "test.html")
readr::write_file( output, temp1 )
output <- freq_by(diamonds %>% filter( cut == "Fair"), c("cut", "color"), "clarity")
library(epitable)
output <- freq_by(diamonds %>% filter( cut == "Fair"), c("cut", "color"), "clarity")
library(tidyverse)
output <- freq_by(diamonds %>% filter( cut == "Fair"), c("cut", "color"), "clarity")
output <- freq_by(diamonds %>% filter( cut == "Fair"), c("cut", "color"), "clarity")
library(epitable)
output <- freq_by(diamonds %>% filter( cut == "Fair"), c("cut", "color"), "clarity")
output <- freq_by(example_data, c("cut", "color"), "clarity")
temp1 <- tempfile(pattern = "test.html")
readr::write_file( output, temp1 )
utils::browseURL( temp1 )
temp1
temp1 <- tempfile(pattern = "test.html")
temp1
tempfile(pattern = "file", tmpdir = tempdir(), fileext = "html")
tempfile(pattern = "file", tmpdir = tempdir(), fileext = ".html")
temp1 <- tempfile(pattern = "file", tmpdir = tempdir(), fileext = ".html")
readr::write_file( output, temp1 )
utils::browseURL( temp1 )
library(epitable)
detach("package:epitable", unload = TRUE )
install.packages("C:/Users/rahela/Desktop/epitable_0.1.0.tar.gz", repos = NULL, type = "source")
library(epitable)
freq_by(example_data, c("cut","color"), "clarity")
library(epitable)
library(epitable)
library(rlang)
library(rlang)
library(rlang)
install.packages("rlang")
install.packages("tidyverse")
library(epitable)
install.packages("roxygen2")
library(epitable)
freqby
freq_by()
2+2
library(epitable)
roxygenize()
library(roxygen2)
roxygenize()
install.packages(htmlTable)
install.packages("htmlTable")
roxygenize()
roxygenize()
roxygenize()
roxygenize()
roxygenize()
roxygenize()
library(epitable)
2+2
example_data
install.packages("devtools")
library(epitable)
2+2
library(epitable)
2+2
sessionInfo()
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("PATH")
Sys.getenv("PATH")
