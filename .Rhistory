map2( variables_n, variables_l, .f = function(x,y ) rep( x, each = y)) %>% unlist()
cat_variables_n_l    <-  model_object$xlevels
cat_variables_n      <-  names( cat_variables_n_l )
cat_variables_l      <-  map_dbl(cat_variables_n_l,   length )
cat_variables_output <-  map2( cat_variables_n, cat_variables_l, .f = function(x,y ) rep( x, each = y)) %>%
unlist()
cat_variables_output
cat_variables_n_l    <-  model_object$xlevels
cat_variables_n      <-  names( cat_variables_n_l )
cat_variables_l      <-  map_dbl(cat_variables_n_l,   length )
cat_variables_output <-  map2( cat_variables_n, cat_variables_l, .f = function(x,y ) rep( x, each = y)) %>% unlist()
inside_list1 <- model_object$xlevels
output_list <- list()
for (i in 1:length(inside_list1) ) {
output_list[[i]] <-  paste0( names(inside_list1[i]),  as.character( unlist( inside_list1[i] )  )  )
}
categorical_covariates <- unlist( output_list)
numeric_covariates <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
all_covariates92681 <- c( categorical_covariates, numeric_covariates )
covariate_df_92681 <- data.frame( term = all_covariates92681)
# the full covariate list is left joined with the statistical values
values_92681 <- broom::tidy(model_object, exponentiate = TRUE )
dplyr::left_join( covariate_df_92681, values_92681, "term" ) -> output_df1
output_df1$categories <- c( as.character( unlist( model_object$xlevels ) ),
numeric_covariates )
output_df1$variables  <- c( cat_variables_output, numeric_covariates)
output_df1
add_reference_levels <- function( model_object ) {
if (   class( model_object ) == "coxph" ) {
cat_variables_n_l    <-  model_object$xlevels
cat_variables_n      <-  names( cat_variables_n_l )
cat_variables_l      <-  map_dbl(cat_variables_n_l,   length )
cat_variables_output <-  map2( cat_variables_n, cat_variables_l, .f = function(x,y ) rep( x, each = y)) %>% unlist()
inside_list1 <- model_object$xlevels
output_list <- list()
for (i in 1:length(inside_list1) ) {
output_list[[i]] <-  paste0( names(inside_list1[i]),  as.character( unlist( inside_list1[i] )  )  )
}
categorical_covariates <- unlist( output_list)
numeric_covariates <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
all_covariates92681 <- c( categorical_covariates, numeric_covariates )
covariate_df_92681 <- data.frame( term = all_covariates92681)
# the full covariate list is left joined with the statistical values
values_92681 <- broom::tidy(model_object, exponentiate = TRUE )
dplyr::left_join( covariate_df_92681, values_92681, "term" ) -> output_df1
output_df1$variables  <- c( cat_variables_output, numeric_covariates)
output_df1$categories <- c( as.character( unlist( model_object$xlevels ) ), numeric_covariates )
output_df1
}
}
add_reference_levels(model1 )
inside_list1
output_list
categorical_covariates
cat_variables_n_l
cat_variables_n
cat_variables_output
categorical_covariates
cat_variables_n_l
cat_variables_n
cat_variables_output
cat_variables_l
cat_variables_n
cat_variables_n_l
model_object$xlevels %>% unlist()
cat_categories       <- model_object$xlevels %>% unlist()
cat_categories
cat_categories       <- model_object$xlevels %>% unlist() %>% as.character()
cat_categories
cat_variables_n
cat_variables_n
cat_categories
model_object$xlevels
cat_variables_n_l
map2( cat_variables_n, cat_variables_n_l, function(x,y) paste0(x,y )  )
map2( cat_variables_n, cat_variables_n_l, function(x,y) paste0(x,y )  )  %>% unlist()
categorical_covariates
numeric_covariates
cat_variables_n_l      <-  model_object$xlevels
cat_variables_n        <-  names( cat_variables_n_l )
cat_variables_l        <-  map_dbl(cat_variables_n_l,   length )
cat_variables_output   <-  map2( cat_variables_n, cat_variables_l, .f = function(x,y ) rep( x, each = y)) %>% unlist()
cat_categories         <- model_object$xlevels %>% unlist() %>% as.character()
categorival_covariates <- map2( cat_variables_n, cat_variables_n_l, function(x,y) paste0(x,y )  )  %>% unlist()
numeric_covariates <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
all_covariates_as_model <- c( categorical_covariates, numeric_covariates )
all_covariates_model_names <- c( categorical_covariates, numeric_covariates )
covariate_df_92681 <- data.frame( term = all_covariates_model_names )
covariate_df_92681
values_92681               <- broom::tidy(model_object, exponentiate = TRUE )
values_92681
covariate_df_92681
values_92681
cat_variables_n_l
cat_variables_output
categorival_covariates
numeric_covariates
cat_variables_n_l      <-  model_object$xlevels
cat_variables_n        <-  names( cat_variables_n_l )
cat_variables_l        <-  map_dbl(cat_variables_n_l,   length )
cat_variables_output   <-  map2( cat_variables_n, cat_variables_l, .f = function(x,y ) rep( x, each = y)) %>% unlist()
cat_variables_output
cat_categories
categorival_covariates
cat_categories
categorival_covariates
cat_variables_output
cat_categories
categorival_covariates
all_covariates_model_names
numeric_covariates
categorival_covariates
term_column_categoric <- map2( cat_variables_n, cat_variables_n_l, function(x,y) paste0(x,y )  )  %>% unlist()
term_column_categoric
df %>% count(age_bin)
cat_categories
cat_variables_n_l
cat_variables_output
cat_categories
term_column_categoric
term_column_all
term_column_all       <- c( term_column_categoric, term_column_numeric )
term_column_categoric  <- map2( cat_variables_n, cat_variables_n_l, function(x,y) paste0(x,y )  )  %>% unlist()
term_column_numeric    <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
term_column_all       <- c( term_column_categoric, term_column_numeric )
term_column_all
categorical_covariates
left_column                <- data.frame( term = all_covariates_model_names )
left_column
cat_variables_output
left_column                <- data.frame( term = all_covariates_model_names, variables = cat_variables_output )
cat_variables_output
term_column_numeric
term_column_numeric
cat_variables_output
pretty_variables       <- c( cat_variables_output, term_column_numeric )
pretty_variables
cat_categories
cat_variables_output
cat_variables_n
cat_variables_l
cat_categories
cat_categories
pretty_categories      <- c( cat_categories, term_column_numeric )
pretty_categories
pretty_variables
term_column_categoric
term_column_all       <- c( term_column_categoric, term_column_numeric )
term_column_all
left_column$variables  <-  pretty_variables
left_column
left_column$categories <-  pretty_categories
left_column
tidy_model_input          <- broom::tidy(model_object, exponentiate = TRUE )
dplyr::left_join( left_column, tidy_model_output, "term" )
tidy_model_input          <- broom::tidy(model_object, exponentiate = TRUE )
tidy_model_output          <- broom::tidy(model_object, exponentiate = TRUE )
dplyr::left_join( left_column, tidy_model_output, "term" )
suppressWarnings( dplyr::left_join( left_column, tidy_model_output, "term" )   )
suppressWarnings( dplyr::left_join( left_column, tidy_model_output, "term" ) ) -> add_ref_output
add_reference_levels <- function( model_object ) {
if (   class( model_object ) == "coxph" ) {
# extract pretty categorical variables (used for presentation, including ref category)
cat_variables_n_l      <-  model_object$xlevels
cat_variables_n        <-  names( cat_variables_n_l )
cat_variables_l        <-  map_dbl(cat_variables_n_l,   length )
cat_variables_output   <-  map2( cat_variables_n, cat_variables_l, .f = function(x,y ) rep( x, each = y)) %>% unlist()
# extract pretty categorical categories (used for presentation)
cat_categories         <- model_object$xlevels %>% unlist() %>% as.character()
# combine pretty categorical variables and numeric variables
term_column_numeric    <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
pretty_variables       <- c( cat_variables_output, term_column_numeric )
pretty_categories      <- c( cat_categories, term_column_numeric )
# extract terms column in style of model output (used for join)
term_column_categoric  <- map2( cat_variables_n, cat_variables_n_l, function(x,y) paste0(x,y )  )  %>% unlist()
left_column            <-  data.frame( term = c( term_column_categoric, term_column_numeric ) )
left_column$variables  <-  pretty_variables
left_column$categories <-  pretty_categories
# the full covariate list is left joined with the statistical values
tidy_model_output          <- broom::tidy(model_object, exponentiate = TRUE )
suppressWarnings( dplyr::left_join( left_column, tidy_model_output, "term" ) ) -> add_ref_output
}
}
add_reference_levels <- function( model_object ) {
if (   class( model_object ) == "coxph" ) {
# extract pretty categorical variables (used for presentation, including ref category)
cat_variables_n_l      <-  model_object$xlevels
cat_variables_n        <-  names( cat_variables_n_l )
cat_variables_l        <-  map_dbl(cat_variables_n_l,   length )
cat_variables_output   <-  map2( cat_variables_n, cat_variables_l, .f = function(x,y ) rep( x, each = y)) %>% unlist()
# extract pretty categorical categories (used for presentation)
cat_categories         <- model_object$xlevels %>% unlist() %>% as.character()
# combine pretty categorical variables and numeric variables
term_column_numeric    <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
pretty_variables       <- c( cat_variables_output, term_column_numeric )
pretty_categories      <- c( cat_categories, term_column_numeric )
# extract terms column in style of model output (used for join)
term_column_categoric  <- map2( cat_variables_n, cat_variables_n_l, function(x,y) paste0(x,y )  )  %>% unlist()
left_column            <-  data.frame( term = c( term_column_categoric, term_column_numeric ) )
left_column$variables  <-  pretty_variables
left_column$categories <-  pretty_categories
# the full covariate list is left joined with the statistical values
tidy_model_output          <- broom::tidy(model_object, exponentiate = TRUE )
suppressWarnings( dplyr::left_join( left_column, tidy_model_output, "term" ) ) -> add_ref_output
}
}
add_reference_levels <- function( model_object ) {
if (   class( model_object ) == "coxph" ) {
# extract pretty categorical variables (used for presentation, including ref category)
cat_variables_n_l      <-  model_object$xlevels
cat_variables_n        <-  names( cat_variables_n_l )
cat_variables_l        <-  map_dbl(cat_variables_n_l,   length )
cat_variables_output   <-  map2( cat_variables_n, cat_variables_l, .f = function(x,y ) rep( x, each = y)) %>% unlist()
# extract pretty categorical categories (used for presentation)
cat_categories         <- model_object$xlevels %>% unlist() %>% as.character()
# combine pretty categorical variables and numeric variables
term_column_numeric    <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
pretty_variables       <- c( cat_variables_output, term_column_numeric )
pretty_categories      <- c( cat_categories, term_column_numeric )
# extract terms column in style of model output (used for join)
term_column_categoric  <- map2( cat_variables_n, cat_variables_n_l, function(x,y) paste0(x,y )  )  %>% unlist()
left_column            <-  data.frame( term = c( term_column_categoric, term_column_numeric ) )
left_column$variables  <-  pretty_variables
left_column$categories <-  pretty_categories
# the full covariate list is left joined with the statistical values
tidy_model_output          <- broom::tidy(model_object, exponentiate = TRUE )
suppressWarnings( dplyr::left_join( left_column, tidy_model_output, "term" ) ) -> add_ref_output
}
}
add_reference_levels(model1 )
add_reference_levels <- function( model_object ) {
if (   class( model_object ) == "coxph" ) {
# extract pretty categorical variables (used for presentation, including ref category)
cat_variables_n_l      <-  model_object$xlevels
cat_variables_n        <-  names( cat_variables_n_l )
cat_variables_l        <-  map_dbl(cat_variables_n_l,   length )
cat_variables_output   <-  map2( cat_variables_n, cat_variables_l, .f = function(x,y ) rep( x, each = y)) %>% unlist()
# extract pretty categorical categories (used for presentation)
cat_categories         <- model_object$xlevels %>% unlist() %>% as.character()
# combine pretty categorical variables and numeric variables
term_column_numeric    <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
pretty_variables       <- c( cat_variables_output, term_column_numeric )
pretty_categories      <- c( cat_categories, term_column_numeric )
# extract terms column in style of model output (used for join)
term_column_categoric  <- map2( cat_variables_n, cat_variables_n_l, function(x,y) paste0(x,y )  )  %>% unlist()
left_column            <-  data.frame( term = c( term_column_categoric, term_column_numeric ) )
left_column$variables  <-  pretty_variables
left_column$categories <-  pretty_categories
# the full covariate list is left joined with the statistical values
tidy_model_output          <- broom::tidy(model_object, exponentiate = TRUE )
suppressWarnings( dplyr::left_join( left_column, tidy_model_output, "term" ) ) -> add_ref_output
add_ref_output
}
}
add_reference_levels(model1 )
add_reference_levels(model1 )
add_reference_levels <- function( model_object ) {
if (   class( model_object ) == "coxph" ) {
# extract pretty categorical variables (used for presentation, including ref category)
cat_variables_n_l      <-  model_object$xlevels
cat_variables_n        <-  names( cat_variables_n_l )
cat_variables_l        <-  map_dbl(cat_variables_n_l,   length )
cat_variables_output   <-  map2( cat_variables_n, cat_variables_l, .f = function(x,y ) rep( x, each = y)) %>% unlist()
# extract pretty categorical categories (used for presentation)
cat_categories         <- model_object$xlevels %>% unlist() %>% as.character()
# combine pretty categorical variables and numeric variables
term_column_numeric    <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
pretty_variables       <- c( cat_variables_output, term_column_numeric )
pretty_categories      <- c( cat_categories, term_column_numeric )
# extract terms column in style of model output (used for join)
term_column_categoric  <- map2( cat_variables_n, cat_variables_n_l, function(x,y) paste0(x,y )  )  %>% unlist()
left_column            <-  data.frame( term = c( term_column_categoric, term_column_numeric ) )
left_column$variables  <-  pretty_variables
left_column$categories <-  pretty_categories
# the full covariate list is left joined with the statistical values
tidy_model_output          <- broom::tidy(model_object, exponentiate = TRUE )
suppressWarnings( dplyr::left_join( left_column, tidy_model_output, "term" ) ) -> add_ref_output
print(add_ref_output)
}
}
add_reference_levels(model1)
lung <- survival::lung
lung$species <- iris$Species[ sample.int( 150, 228, replace = TRUE )]
input_to_function <- survival::coxph( survival::Surv( time, status == 2 ) ~ age +
sex  + ph.karno + wt.loss + species, data =  lung)
add_reference_levels( model_object = input_to_function)
cat_variables_output
length(cat_variables_output )
length( term_column_numeric )
rep( "character or factor", length(cat_variables_output ) )
rep( "char_factor", length(cat_variables_output ) )
rep( "char_or_factor", length(cat_variables_output ) )
rep( "numeric"       , length( term_column_numeric ) )
column_type            <- c( rep( "char_or_factor", length(cat_variables_output ) ),
rep( "numeric"       , length( term_column_numeric ) ) )
column_type
left_column$type       <-  column_type
add_reference_levels <- function( model_object ) {
if (   class( model_object ) == "coxph" ) {
# extract pretty categorical variables (used for presentation, including ref category)
cat_variables_n_l      <-  model_object$xlevels
cat_variables_n        <-  names( cat_variables_n_l )
cat_variables_l        <-  map_dbl(cat_variables_n_l,   length )
cat_variables_output   <-  map2( cat_variables_n, cat_variables_l, .f = function(x,y ) rep( x, each = y)) %>% unlist()
# extract pretty categorical categories (used for presentation)
cat_categories         <- model_object$xlevels %>% unlist() %>% as.character()
# combine pretty categorical variables and numeric variables
term_column_numeric    <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
pretty_variables       <- c( cat_variables_output, term_column_numeric )
pretty_categories      <- c( cat_categories, term_column_numeric )
column_type            <- c( rep( "char_or_factor", length(cat_variables_output ) ),
rep( "numeric"       , length( term_column_numeric ) ) )
# create terms column in style of model output (used for join)
term_column_categoric  <- map2( cat_variables_n, cat_variables_n_l, function(x,y) paste0(x,y )  )  %>% unlist()
left_column            <-  data.frame( term = c( term_column_categoric, term_column_numeric ) )
left_column$variables  <-  pretty_variables
left_column$categories <-  pretty_categories
left_column$type       <-  column_type
# the full covariate list is left joined with the statistical values
tidy_model_output          <- broom::tidy(model_object, exponentiate = TRUE )
suppressWarnings( dplyr::left_join( left_column, tidy_model_output, "term" ) ) -> add_ref_output
print(add_ref_output)
}
}
add_reference_levels(model1)
tidy(model1)
broom::tidy(model1)
broom::tidy(model1, exponentiate = TRUE )
add_reference_levels(model1)
add_reference_levels(model1)
broom::tidy(model1, exponentiate = TRUE )
model_to_html <- function( univariate_models_list, model_class = "coxph" ) {
if(! is.list(univariate_models_list)) {
stop ("univariate_models_list must be a list")
}
if(model_class == "coxph") {
purrr::map( univariate_models_list, class ) %>%
purrr::map( function(x) "coxph" %in% x ) %>%
unlist() %>%
all() -> are_all_models_coxph
if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
}
univariate_models_list %>%
purrr::map(  add_reference_levels )
}
add_reference_levels(model1 )
add_reference_levels(model1 )
add_reference_levels(model1 ) -> output
output
output$conf.high
print( output$conf.high )
source('C:/Users/rahela/Desktop/epitable/R/print_model_to_html.R', echo=TRUE)
print( output$conf.high, na.print = "1"  )
print( output$conf.high, na.print = "-"  )
print( roun( output$conf.high, 2) , na.print = "-"  )
print( round( output$conf.high, 2) , na.print = "-"  )
print( round( output$conf.high, 3) , na.print = "-"  )
model_to_html(model_list)
model_to_html(model_list) %>% bind_rows()
model_to_html(model_list) %>% bind_rows()
model_to_html(model_list) %>% rbind()
model_to_html(model_list) %>% -> out1
out1
model_to_html(model_list) %>%  out1
model_to_html(model_list)
model_to_html(model_list)  %>% unlist()
model_to_html(model_list) -> output
output
output %>% bind_rows()
model_to_html(model_list) %>% bind_rows()
add_reference_levels <- function( model_object ) {
if (   class( model_object ) == "coxph" ) {
# extract pretty categorical variables (used for presentation, including ref category)
cat_variables_n_l      <-  model_object$xlevels
cat_variables_n        <-  names( cat_variables_n_l )
cat_variables_l        <-  map_dbl(cat_variables_n_l,   length )
cat_variables_output   <-  map2( cat_variables_n, cat_variables_l, .f = function(x,y ) rep( x, each = y)) %>% unlist()
# extract pretty categorical categories (used for presentation)
cat_categories         <- model_object$xlevels %>% unlist() %>% as.character()
# combine pretty categorical variables and numeric variables
term_column_numeric    <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
pretty_variables       <- c( cat_variables_output, term_column_numeric )
pretty_categories      <- c( cat_categories, term_column_numeric )
column_type            <- c( rep( "char_or_factor", length(cat_variables_output ) ),
rep( "numeric"       , length( term_column_numeric ) ) )
# create terms column in style of model output (used for join)
term_column_categoric  <- map2( cat_variables_n, cat_variables_n_l, function(x,y) paste0(x,y )  )  %>% unlist()
left_column            <-  data.frame( term = c( term_column_categoric, term_column_numeric ) )
left_column$variables  <-  pretty_variables
left_column$categories <-  pretty_categories
left_column$type       <-  column_type
# the full covariate list is left joined with the statistical values
tidy_model_output          <- broom::tidy(model_object, exponentiate = TRUE )
suppressWarnings( dplyr::left_join( left_column, tidy_model_output, "term" ) ) -> add_ref_output
add_ref_output
}
}
model_to_html(model_list) %>% bind_rows()
model1
model_to_html(model1)
class( model1 )
model_to_html <- function( univariate_models_list, model_class = "coxph" ) {
if(! is.list(univariate_models_list)) {
stop ("univariate_models_list must be a list")
}
if(model_class == "coxph") {
purrr::map( univariate_models_list, class ) %>%
purrr::map( function(x) "coxph" %in% x ) %>%
unlist() %>%
all() -> are_all_models_coxph
if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
}
univariate_models_list %>%
purrr::map(  add_reference_levels )
}
model_to_html(model1)
model_to_html(list(model1))
! is.list(model1 ))
! is.list(model1 )
!is.list(model1 )
is.list(model1 )
class(model1)
class(model1)=="list"
!class(model1)=="list"
model_to_html <- function( univariate_models_list, model_class = "coxph" ) {
if(  !class(model1)=="list") {
stop ("univariate_models_list must be a list")
}
if(model_class == "coxph") {
purrr::map( univariate_models_list, class ) %>%
purrr::map( function(x) "coxph" %in% x ) %>%
unlist() %>%
all() -> are_all_models_coxph
if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
}
univariate_models_list %>%
purrr::map(  add_reference_levels )
}
model_to_html( model1  )
model_to_html( list(model1  ) )
list(model1  )
class( list(model1  ) )
class( list(model1  ) )  == "list"
model_to_html <- function( univariate_models_list, model_class = "coxph" ) {
if(  !class(univariate_models_list)=="list") {
stop ("univariate_models_list must be a list")
}
if(model_class == "coxph") {
purrr::map( univariate_models_list, class ) %>%
purrr::map( function(x) "coxph" %in% x ) %>%
unlist() %>%
all() -> are_all_models_coxph
if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
}
univariate_models_list %>%
purrr::map(  add_reference_levels )
}
model_to_html( list(model1  ) )
model_to_html( (model1  ) )
test_that("User input is correct",  {
# expect error if univariate_models_list is not list
testthat::expect_error( model_to_html( univariate_models_list = "asdf") )
# expect error if univariate_models_list contain not coxph element
testthat::expect_error( model_to_html( univariate_models_list = model_list_with_extra ))
} )
test_that("User input is correct",  {
# expect error if univariate_models_list is not list
testthat::expect_error( model_to_html( univariate_models_list = "asdf") )
# expect error if univariate_models_list contain not coxph element
testthat::expect_error( model_to_html( univariate_models_list = model_list_with_extra ))
} )
model_to_html <- function( univariate_models_list, model_class = "coxph", simple = TRUE ) {
if(  !class(univariate_models_list)=="list") {
stop ("univariate_models_list must be a list")
}
if(model_class == "coxph") {
purrr::map( univariate_models_list, class ) %>%
purrr::map( function(x) "coxph" %in% x ) %>%
unlist() %>%
all() -> are_all_models_coxph
if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
}
univariate_models_list %>%
purrr::map(  add_reference_levels )  %>% bind_rows()
}
model_to_html( (model1  ) )
model_to_html( list(model1  ) )
model_to_html <- function( univariate_models_list, model_class = "coxph", simple = TRUE ) {
if(  !class(univariate_models_list)=="list") {
stop ("univariate_models_list must be a list")
}
if(model_class == "coxph") {
purrr::map( univariate_models_list, class ) %>%
purrr::map( function(x) "coxph" %in% x ) %>%
unlist() %>%
all() -> are_all_models_coxph
if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
}
univariate_models_list %>%
purrr::map(  add_reference_levels )  %>% bind_rows() -> univariate_models
}
