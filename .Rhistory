a
a[1]
count(diamonds, cut ) %>% pull(n) %>% chisq.test() %>%  broom::tidy(.,digits = 100) %>% unlist()
count(diamonds, cut ) %>% pull(n) %>% chisq.test() %>%  broom::tidy(.,digits = 10)
inner_function <- function(categorical_data, var) {
var_symbol <-  rlang::sym(var)
categorical_data %>%
dplyr::count( UQ( var_symbol )) %>%  tidyr::complete( UQ(var_symbol), fill = list( n = 0)) %>%
dplyr::select(variable, category, n )
}
suppressWarnings(
var_vektor %>%
purrr::map(  function(x) inner_function(categorical_data, x) )    %>%
dplyr::bind_rows()
)
}
suppressWarnings(
var_vektor %>%
purrr::map(  function(x) inner_function(categorical_data, x) )    %>%
dplyr::bind_rows()
)
var_vector <- c("cut", "color")
suppressWarnings(
var_vektor %>%
purrr::map(  function(x) inner_function(categorical_data, x) )    %>%
dplyr::bind_rows()
)
var_vektor <- c("cut", "color")
suppressWarnings(
var_vektor %>%
purrr::map(  function(x) inner_function(categorical_data, x) )    %>%
dplyr::bind_rows()
)
categorical_data %>%
dplyr::count( UQ( var_symbol )) %>%  tidyr::complete( UQ(var_symbol), fill = list( n = 0)) %>%
dplyr::select(variable, category, n )
}
categorical_data %>%
dplyr::count( UQ( var_symbol )) %>%  tidyr::complete( UQ(var_symbol), fill = list( n = 0)) %>%
dplyr::select(variable, category, n )
categorical_data %>%
dplyr::count( UQ( var_symbol )) %>%  tidyr::complete( UQ(var_symbol), fill = list( n = 0))
categorical_data %>%
dplyr::count( UQ( var_symbol )) %>%  tidyr::complete( UQ(var_symbol), fill = list( n = 0)) %>%
transmute(
n        = n,
variable = var,
category = UQ( var_symbol ) )  %>%
dplyr::select(variable, category, n, pct )
var_symbol <-  rlang::sym(var)
categorical_data %>%
dplyr::count( UQ( var_symbol )) %>%  tidyr::complete( UQ(var_symbol), fill = list( n = 0)) %>%
transmute(
n        = n,
variable = var,
category = UQ( var_symbol ) )  %>%
dplyr::select(variable, category, n)
suppressWarnings(
var_vektor %>%
purrr::map(  function(x) inner_function(categorical_data, x) )    %>%
dplyr::bind_rows()
)
inner_function <- function(categorical_data, var) {
var_symbol <-  rlang::sym(var)
categorical_data %>%
dplyr::count( UQ( var_symbol )) %>%  tidyr::complete( UQ(var_symbol), fill = list( n = 0)) %>%
transmute(
n        = n,
variable = var,
category = UQ( var_symbol ) )  %>%
dplyr::select(variable, category, n)
}
suppressWarnings(
var_vektor %>%
purrr::map(  function(x) inner_function(categorical_data, x) )    %>%
dplyr::bind_rows()
)
dataset %>%
dplyr::group_by(rlang::UQ(by_group_symbol)) %>%
dplyr::do("by_group_var" = freq_function(., var_vector))  %>%  tidyr::unnest()  %>%
dplyr::group_by(rlang::UQ(by_group_symbol)) %>%
dplyr::do(do_data = (.)) %>% dplyr::select(do_data) %>%  purrr::flatten() %>%
dataset %>%
dplyr::group_by(rlang::UQ(by_group_symbol)) %>%
dplyr::do("by_group_var" = freq_function(., var_vector))  %>%  tidyr::unnest()  %>%
dplyr::group_by(rlang::UQ(by_group_symbol)) %>%
dplyr::do(do_data = (.)) %>% dplyr::select(do_data) %>%  purrr::flatten() %>%
purrr::map(
.,
.f = function(x)  {
names(x)[names(x) %in% c("pct", "n")] <-
paste0(names(x)[names(x) %in% c("pct", "n")], "_", x[1, 1])
x[, -1]
}
) %>%
Reduce(function(x, y)
dplyr::full_join(x, y,  by = c( "variable", "category" )), .) -> table1
)
dataset
dataset <- categorical_data
dataset %>%
dplyr::group_by(rlang::UQ(by_group_symbol)) %>%
dplyr::do("by_group_var" = freq_function(., var_vector))  %>%  tidyr::unnest()  %>%
dplyr::group_by(rlang::UQ(by_group_symbol)) %>%
dplyr::do(do_data = (.)) %>% dplyr::select(do_data) %>%  purrr::flatten() %>%
purrr::map(
.,
.f = function(x)  {
names(x)[names(x) %in% c("pct", "n")] <-
paste0(names(x)[names(x) %in% c("pct", "n")], "_", x[1, 1])
x[, -1]
}
) %>%
Reduce(function(x, y)
dplyr::full_join(x, y,  by = c( "variable", "category" )), .) -> table1
var_vektor
by_group_symbol   <- rlang::sym(by_group)
by_group <- "clarity"
by_group_symbol   <- rlang::sym(by_group)
dataset <- categorical_data
dataset %>%
dplyr::group_by(rlang::UQ(by_group_symbol)) %>%
dplyr::do("by_group_var" = freq_function(., var_vector))  %>%  tidyr::unnest()  %>%
dplyr::group_by(rlang::UQ(by_group_symbol)) %>%
dplyr::do(do_data = (.)) %>% dplyr::select(do_data) %>%  purrr::flatten() %>%
purrr::map(
.,
.f = function(x)  {
names(x)[names(x) %in% c("pct", "n")] <-
paste0(names(x)[names(x) %in% c("pct", "n")], "_", x[1, 1])
x[, -1]
}
) %>%
Reduce(function(x, y)
dplyr::full_join(x, y,  by = c( "variable", "category" )), .) -> table1
diamonds
numeric_data      <- dataset[, c("cut", "color", "price", "clarity")] %>% dplyr::select_if( is.numeric )
categorical_data  <- dataset[, c("cut", "color", "price", "clarity")] %>% dplyr::select_if( function(x) is.factor(x) | is.character(x) )
dataset <- diamonds
numeric_data      <- dataset[, c("cut", "color", "price", "clarity")] %>% dplyr::select_if( is.numeric )
categorical_data  <- dataset[, c("cut", "color", "price", "clarity")] %>% dplyr::select_if( function(x) is.factor(x) | is.character(x) )
categorical_data
dataset %>%
dplyr::group_by(rlang::UQ(by_group_symbol)) %>%
dplyr::do("by_group_var" = freq_function(., var_vector))  %>%  tidyr::unnest()  %>%
dplyr::group_by(rlang::UQ(by_group_symbol)) %>%
dplyr::do(do_data = (.)) %>% dplyr::select(do_data) %>%  purrr::flatten() %>%
purrr::map(
.,
.f = function(x)  {
names(x)[names(x) %in% c("pct", "n")] <-
paste0(names(x)[names(x) %in% c("pct", "n")], "_", x[1, 1])
x[, -1]
}
) %>%
Reduce(function(x, y)
dplyr::full_join(x, y,  by = c( "variable", "category" )), .) -> table1
table1
freq_function
inner_function <- function(categorical_data, var) {
var_symbol <-  rlang::sym(var)
categorical_data %>%
dplyr::count( UQ( var_symbol )) %>%  tidyr::complete( UQ(var_symbol), fill = list( n = 0)) %>%
transmute(
n        = n,
variable = var,
category = UQ( var_symbol ) )  %>%
dplyr::select(variable, category, n)
}
var_vektor %>%
purrr::map(  function(x) inner_function(categorical_data, x) )    %>%
dplyr::bind_rows()
dataset %>%
dplyr::group_by(rlang::UQ(by_group_symbol))
dataset %>%
dplyr::group_by(rlang::UQ(by_group_symbol)) %>%
dplyr::do("by_group_var" = freq_function(., var_vector))
dataset %>%
dplyr::group_by(rlang::UQ(by_group_symbol)) %>%
dplyr::do("by_group_var" = freq_function(., var_vector))  %>%  tidyr::unnest()
dataset
var_vector
inner_function(categorical_data, "cut")
categorical_data
inner_function(categorical_data, "cut")
categorical_data
categorical_data  %>% group_by("clarity")
categorical_data  %>% group_by(clarity )
categorical_data  %>% group_by(clarity ) %>%
do( "count_df" = inner_function(grouped_cat_data , "")
categorical_data  %>% group_by(clarity ) %>%
do( "count_df" = inner_function(grouped_cat_data , "cut" ) )
categorical_data  %>% group_by(clarity ) %>%
do( "count_df" = function(x) inner_function(x , "cut" ) )
categorical_data  %>% group_by(clarity ) %>%
do( "count_df" = function(x) inner_function(x , cut ) )
categorical_data  %>% group_by(clarity ) %>%
map( .f =  function(x) inner_function(x , cut ) )
categorical_data  %>% group_by(clarity ) %>%
map( .f =  function(x) inner_function(x , "cut" ) )
categorical_data
categorical_data  %>% group_by(clarity )
categorical_data  %>% group_by(clarity ) %>%
do( "asdf" =  function(x) x %>%  count( "cut" )
)
categorical_data  %>% group_by(clarity ) %>%
do( "asdf" =  function(x) x %>%  count( "cut" )  ) -> out
out$asdf
categorical_data  %>% group_by(clarity ) %>%
do( "asdf" =  function(x) dim(x) )
categorical_data  %>% group_by(clarity ) %>%
do(  function(x) dim(x) )
categorical_data  %>% group_by(clarity ) %>%
do( "asdf" =   dim(.) )
categorical_data  %>% group_by(clarity ) %>%
do( "asdf" =   summary(.) )
categorical_data  %>% group_by(clarity ) %>%
do( "asdf" =   inner_function(. "cut") )
categorical_data  %>% group_by(clarity ) %>%
do( "asdf" =   count(cut)  )
categorical_data  %>% group_by(clarity ) %>%
do( "asdf" =   count(.$cut)  )
categorical_data  %>% group_by(clarity ) %>%
do( "asdf" =   count(cut)  )
categorical_data  %>% group_by(clarity ) %>%
do( "asdf" = . %>%  count(cut)  )
categorical_data  %>% group_by(clarity ) %>%
do( "asdf" =  count(., cut)  )
%
do( "asdf" =  count(., cut)  )         ->  out
categorical_data  %>% group_by(clarity ) %>%
do( "asdf" =  count(., cut)  )         ->  out
categorical_data  %>% group_by(clarity ) %>%
do( "asdf" =  count(., cut)  )         ->  out
categorical_data  %>% group_by(clarity ) %>%
do( "asdf" =  count(., cut)  )         ->  out
out$asdf
out
categorical_data  %>% group_by(clarity ) %>%
do( "counts" =  count(., cut)  )         ->  out
out
out %>% flatten()
out %>% unnest()
out %>% unnest %>% chisq.test(clarity, cut )
chisq.test(diamonds$clarity, diamonds$cut )
diamonds %>% select("color", "cut") %>%
map( .f = head )
diamonds %>% select("color", "cut") %>%
map( .f = functino(x)  head(x)  )
diamonds %>% select("color", "cut") %>%
map( .f = function(x)  head(x)  )
diamonds %>% select("color", "cut") %>%
map( .f = class(x)    )
diamonds %>% select("color", "cut") %>%
map( .f = function(x) class(x)    )
diamonds %>% select("color", "cut") %>%
do( "data1" = head(.) )
diamonds %>% select("color", "cut") %>%
do( "data1" = head(.) )  %>% unnest()
diamonds %>% select("color", "cut") %>%
do( "data1" =  chisq.test(.$color, .$cut) )  %>% unnest()
diamonds %>% select("color", "cut") %>%
do( "data1" =  tidy( chisq.test(.$color, .$cut)) )  %>% unnest()
library(broom)
diamonds %>% select("color", "cut") %>%
do( "data1" =  tidy( chisq.test(.$color, .$cut)) )  %>% unnest()
diamonds %>% select("color", "cut") %>%
do( "data1" =  function(x) tidy( chisq.test(x$color, x$cut)) )  %>% unnest()
diamonds %>% select("color", "cut") %>%
do( "data1" =  tidy( chisq.test(.$color, .$cut)) )  %>% unnest()
iris %>%
group_by(Species) %>%
do({
mod <- lm(Sepal.Length ~ Sepal.Width, data = .)
pred <- predict(mod, newdata = .["Sepal.Width"])
data.frame(., pred)
})
iris %>%
group_by(Species) %>%
do({
mod = paste0( dim(.) )
})
iris %>%
group_by(Species) %>%
do({
mod = data.frame( paste0( dim(.) )  )
})
iris %>%
group_by(Species) %>%
do({
. %>% summary()
})
iris %>%
group_by(Species) %>%
do({
asdf <-   . %>% summary()
head(.)
})
diamonds %>% count("color")
diamonds %>% count(color)
chisq.test( diamonds %>% pull(color), diamonds %>% pull(cut))
diamonds group_by(cut) %>% count(color)
diamonds %>% group_by(cut) %>% count(color)
diamonds %>% group_by(cut) %>% count(color) %>% spread()
diamonds %>% group_by(cut) %>% count(color) %>% tidyr::spread()
diamonds %>% group_by(cut) %>% count(color) %>% tidyr::spread(value = n)
diamonds %>% group_by(cut)
diamonds %>% group_by(cut) %>% count(color)
diamonds %>% group_by(cut) %>% do( "countdata" = count(.,color))
diamonds %>% group_by(cut) %>% do( "countdata" = count(.,color)) %>%
unnest()
diamonds %>% group_by(cut) %>% do( "countdata" = count(.,color)) %>%
pull(countdata)
diamonds %>% group_by(cut) %>% do( "countdata" = count(.,color))
diamonds %>% group_by(cut) %>% do( "countdata" = count(.,color)) %>% mutate( "name" cut[1]) %>%
pull(countdata) %>%
diamonds %>% group_by(cut) %>% count(color) %>% tidyr::spread(value = n)
diamonds %>% group_by(cut) %>% do( "countdata" = count(.,color)) %>% mutate( "name" cut[1])
diamonds %>% group_by(cut) %>% do( "countdata" = count(.,color)) %>% mutate( "name" = cut[1])
diamonds %>% group_by(cut) %>% do( "countdata" = count(.,color) %>% mutate( "name" = cut[1]))
diamonds %>% group_by(cut) %>% do( "countdata" = count(.,color) %>% mutate( "name" = 2))
diamonds %>% group_by(cut) %>% do( "countdata" = count(.,color) %>% mutate( "name" = 2)) %>%
pull(countdata)
diamonds %>% group_by(cut) %>% do( "countdata" = count(.,color)  )
diamonds %>% group_by(cut) %>% do( "countdata" = count(.,color)  )
pull(countdata) %>%
diamonds %>% group_by(cut) %>% do( "countdata" = count(.,color)  )
pull(countdata) %>%  ungroup()
diamonds %>% group_by(cut) %>% do( "countdata" = count(.,color)  ) %>% ungroup()
diamonds %>% group_by(cut) %>% do( "countdata" = count(.,color)  ) %>% ungroup() %>%
group_by(cut)
diamonds %>% levels(cut)
diamonds %>% levels(cut)
diamonds %>% pull(cut) %>% levels()
diamonds %>% pull(cut) %>% levels()
map( .f = function(x) diamonds[, x] %>% count(cut))
diamonds %>% pull(cut) %>% levels() %>%
map( .f = function(x) diamonds[, x] %>% count(cut))
diamonds %>% pull(cut) %>% levels() %>%
map( .f = function(x) diamonds %>% filter( cut==x) %>% count(color))
diamonds$"cut"
diamonds %>% pull(cut) %>% levels() %>%
map( .f = function(x) diamonds[  diamonds$"cut"==x) %>% count(color))
diamonds %>% pull(cut) %>% levels() %>%
map( .f = function(x) diamonds[  diamonds$"cut"==x, ] %>% count(color))
diamonds %>% pull(cut) %>% levels() %>%
map( .f = function(x) diamonds[  diamonds$"cut"==x, ] %>% count(color) %>% mutate( "name" x))
diamonds %>% pull(cut) %>% levels() %>%
map( .f = function(x) diamonds[  diamonds$"cut"==x, ] %>% count(color) %>% mutate( "name" =  x))
diamonds %>% select(cut) %>% levels()
diamonds[,"cut"] %>% levels()
diamonds[,"cut"]
diamonds %>% group_by(cut) %>%
do( "asdf" = { count(color)})
diamonds %>% group_by(cut) %>%
do( "asdf" = { count(.,color)})
diamonds %>% group_by(cut) %>%
do( "asdf" = { count(.,color) %>% mutate( "name" = nth(cut,1))})
diamonds %>% group_by(cut) %>%
do( "asdf" = { count(.,color) %>% mutate( "name" = cut[1] ) } )
diamonds %>% group_by(cut) %>%
do( "asdf" = { count(.,color) %>% mutate( "name" = .$cut[1] ) } )
diamonds %>% group_by(cut) %>%
do( "asdf" = { count(.,color)   } )
diamonds %>% group_by(cut) %>%
do( "asdf" =  count(color)    )
diamonds %>% group_by(cut) %>%
do( "asdf" =  count(., color)    )
diamonds %>% group_by(cut) %>%
do( "asdf" =  count(., color)    )  %>% map( .f = function(x) str(x))
diamonds %>% group_by(cut) %>% count(color)
diamonds %>% group_by(cut, color) %>% count()
diamonds %>% group_by(cut, color) %>% count() %>%
split( cut)
diamonds %>% group_by(cut, color) %>% count() %>%
group_by(cut)
diamonds %>% group_by(cut, color) %>% count() %>%
group_by(cut) %>%
map( .f = function(x) head(x) )
diamonds %>% select(color) %>%
map( .f = function(x) {
count(x)
})
diamonds %>% select(color) %>%
map( .f = function(x)  count(x)  )
diamonds %>% select(color) %>% count()
count(  diamonds %>% select(color)  )
iris %>%
group_by(Species) %>%
do({
mod <- lm(Sepal.Length ~ Sepal.Width, data = .)
pred <- predict(mod, newdata = .["Sepal.Width"])
data.frame(., .["Species"][1])
})
diamonds %>% count(cut, color)
diamonds %>% complete(cut, color)
diamonds %>% count(cut, color)
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))
diamonds %>% count(cut, color)
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = data(.))
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = .)
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = (.) )
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = (.) )  %>% map( .f = function(x) x )
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = (.) )  %>% map( .f = function(x) x ) %>%
map( .f = function(x) names(x) )
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = (.) )  %>% map( .f = function(x) x ) %>%
map( .f = function(x) (x) )
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = (.) )  %>% map( .f = function(x) x ) %>%
map( .f = function(x)  x %>% flatten()  )
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = (.) )  %>% map( .f = function(x) x ) %>%
flatten()
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = (.) )  %>% map( .f = function(x) x ) %>%
flatten()  %>% flatten()
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = (.) )  %>% map( .f = function(x) x ) %>%
flatten() %>% map(  .f = function(x) x )
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = (.) )  %>% map( .f = function(x) x ) %>%
flatten() %>% map(  .f = function(x) names(x) )
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = (.) )  %>% map( .f = function(x) x ) %>%
flatten() %>% map(  .f = function(x) x$cut )
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = (.) )  %>% map( .f = function(x) x ) %>%
flatten() %>% map(  .f = function(x) x[ ,"cut" ]  )
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = (.) )  %>% map( .f = function(x) x ) %>%
flatten() %>% map(  .f = function(x) x[1]  )
iamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = (.) )  %>% map( .f = function(x) x ) %>%
flatten() %>% map(  .f = function(x) x  )
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = (.) )  %>% map( .f = function(x) x ) %>%
flatten() %>% map(  .f = function(x) x  )
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = (.) )  %>% map( .f = function(x) x ) %>%
flatten() %>% map(  .f = function(x) x %>% select(cut)  )
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = (.) )  %>% map( .f = function(x) x ) %>%
flatten() %>% map(  .f = function(x) class(x)  )
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut)  %>% do( data = (.) )  %>% map( .f = function(x) x ) %>%
flatten() %>% map(  .f = function(x) class(x[, "cut"])  )
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
reshape2::dcast( formula =  color ~  cut )
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
reshape2::dcast( formula =  color ~  cut ) %>%
group_by(color)
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
reshape2::dcast( formula =  color ~  cut ) %>% group_by(color) %>%
transmute_all( function(x) x + 1000)
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
reshape2::dcast( formula =  color ~  cut ) %>% group_by(color) %>%
mutate_if(  is.numeric,  function(x)   100 * x )
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
reshape2::dcast( formula =  color ~  cut ) %>% group_by(color) %>%
mutate_if(  is.numeric,  function(x)   sum(x) )
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
reshape2::dcast( formula =  color ~  cut ) %>% group_by(color) -> out
out
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
reshape2::dcast( formula =  color ~  cut ) -> out
out  %>%  mutate_if(  is.numeric,  function(x)   sum(x) )
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))
iamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut) %>% transmute( variable = cut,
category = color,
pct    = paste0( round(100/sum(n))),
n     = prettyNum(n, big.mark = " " ))
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut) %>% transmute( variable = cut,
category = color,
pct    = paste0( round(100/sum(n))),
n     = prettyNum(n, big.mark = " " ))
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut) %>% transmute( variable = cut,
category = color,
pct    = paste0( round(100/sum(n))),
n     = prettyNum(n, big.mark = " " ))
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut) %>% transmute( variable = cut,
category = color,
pct    = paste0( round(100* n /sum(n))),
n     = prettyNum(n, big.mark = " " ))
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut) %>% transmute( variable = cut,
category = color,
pct    = paste0( round(100* n /sum(n), "%")),
n     = prettyNum(n, big.mark = " " ))
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut) %>% transmute( variable = cut,
category = color,
pct    = paste0( round(100* n /sum(n)), "%"),
n     = prettyNum(n, big.mark = " " ))
diamonds %>% count(cut, color) %>% complete( cut, color, fill = list( n = 0 ))  %>%
group_by(cut) %>% transmute( variable = cut,
category = color,
pct    = paste0( round(100* n /sum(n)), "%"),
n     = prettyNum(n, big.mark = " " )) %>%
print( n = 30)
