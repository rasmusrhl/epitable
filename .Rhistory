"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup() %>%
transmute(     group,  covariate, category,          n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c(TRUE, TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )) ->     freq_fun_total_output
freq_fun_total_output
freq_fun_total <- function(dataset, var_vector_char_element) {
char_element_symbol      <-  rlang::sym(var_vector_char_element)
# count
dataset %>% count(UQ(by_group_symbol), UQ(char_element_symbol)) %>% complete( UQ(by_group_symbol), UQ(char_element_symbol), fill = list( n = 0 )) %>%
group_by(UQ(by_group_symbol)) %>%
mutate( "group" = UQ(by_group_symbol)[1],
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup() %>%
transmute(     group,  covariate, category,          n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c(TRUE, TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )) ->     freq_fun_total_output
char_element_symbol      <-  rlang::sym(var_vector_char_element)
# count
dataset %>% count(UQ(by_group_symbol), UQ(char_element_symbol)) %>% complete( UQ(by_group_symbol), UQ(char_element_symbol), fill = list( n = 0 )) %>%
group_by(UQ(by_group_symbol)) %>%
mutate( "group" = UQ(by_group_symbol)[1],
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup() %>%
transmute(     group,  covariate, category,          n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c(TRUE, TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )) ->     freq_fun_total_output
freq_fun_total_output
dataset %>% count( UQ(char_element_symbol)) %>% complete( UQ(char_element_symbol), fill = list( n = 0 )) %>%
group_by(UQ(by_group_symbol)) %>%
mutate( "group" = UQ(by_group_symbol)[1],
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup() %>%
transmute(     group,  covariate, category,          n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c(TRUE, TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )) ->     freq_fun_total_output
freq_fun_total_output
char_element_symbol      <-  rlang::sym(var_vector_char_element)
# count
dataset %>% count( UQ(char_element_symbol)) %>% complete( UQ(char_element_symbol), fill = list( n = 0 )) %>%
group_by(UQ(by_group_symbol)) %>%
mutate(
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup()
char_element_symbol      <-  rlang::sym(var_vector_char_element)
# count
dataset %>% count( UQ(char_element_symbol)) %>% complete( UQ(char_element_symbol), fill = list( n = 0 )) %>%
group_by(UQ(by_group_symbol)) %>%
mutate(
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) )
dataset %>% count( UQ(char_element_symbol)) %>% complete( UQ(char_element_symbol), fill = list( n = 0 )) %>%
mutate(
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup()
dataset %>% count( UQ(char_element_symbol)) %>% complete( UQ(char_element_symbol), fill = list( n = 0 )) %>%
mutate(
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup() %>%
transmute(      covariate, category,          n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c( TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )) ->     freq_fun_total_output
freq_fun_total_output
dataset %>% count( UQ(char_element_symbol)) %>% complete( UQ(char_element_symbol), fill = list( n = 0 )) %>%
mutate(
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup() %>%
transmute(      covariate, category,          n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c( TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )) ->     freq_fun_total_output
freq_fun_total_output
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by(diamonds, var_vector = ("cut"),  by_group = "group_var")
include_percent <- FALSE
include_cumpct <- FALSE
include_cumsum <- FALSE
include_subtotal <- FALSE
include_n_missing <- FALSE
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup() %>%
transmute(      covariate, category,          n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c( TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )) %>%
ungroup ->    freq_fun_total_output
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by(diamonds, var_vector = ("cut"),  by_group = "group_var")
include_cumsum <- TRUE
freq_by(diamonds, var_vector = ("cut"),  by_group = "group_var")
freq_by(diamonds,
var_vector = ("cut"),
by_group = "group_var",
include_cumsum = TRUE )
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by(diamonds,
var_vector = ("cut"),
by_group = "group_var",
include_cumsum = TRUE )
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by(diamonds,
var_vector = ("cut"),
by_group = "group_var",
include_cumsum = TRUE )
freq_fun_by <- function(dataset, var_vector_char_element) {
char_element_symbol      <-  rlang::sym(var_vector_char_element)
by_group_vector          <-  dataset               %>% pull(UQ(by_group_symbol))
var_vector_element_pull  <-  dataset               %>% pull(UQ(var_vector_char_element))
# test
chi_test               <- chisq.test( x = by_group_vector, y = var_vector_element_pull  ) %>% tidy()
chi_test$var_vector    <- var_vector_char_element
# count
dataset %>% count(UQ(by_group_symbol), UQ(char_element_symbol)) %>% complete( UQ(by_group_symbol), UQ(char_element_symbol), fill = list( n = 0 )) %>%
group_by(UQ(by_group_symbol))  %>%
mutate( "group" = UQ(by_group_symbol)[1],
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " )
) %>% ungroup() %>%
transmute(     group,  covariate, category,            n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c(TRUE, TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing ))  %>%
plyr::dlply( .variables = "group", function(x) {
names(x)[4:length(names(x))]   <-  paste0( x$group[1], "_", names(x)[4:length(names(x))] )            # The first 3 names group, covariate, category are not changed.
x <- x[,-1]
}   ) %>%
Reduce( function(x, y) left_join(x, y, by = c("covariate", "category" )), . ) -> freq_fun_by_output
if(include_p_value) {
freq_fun_by_output$pvalue <- NA
freq_fun_by_output$pvalue[1] <- chi_test$p.value
}
# freq_fun_total
freq_fun_total <- function(dataset, var_vector_char_element) {
char_element_symbol      <-  rlang::sym(var_vector_char_element)
# count
dataset %>% count( UQ(char_element_symbol)) %>% complete( UQ(char_element_symbol), fill = list( n = 0 )) %>%
mutate(
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup() %>%
transmute(      covariate, category,          n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c( TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )) %>%
ungroup()    ->    freq_fun_total_output
freq_fun_total_output
} # end of freq fun total (defined inside freq_fun_by)
freq_fun_total(dataset, var_vector_char_element) -> freq_fun_total_output
freq_fun_by_output
# chi_test$var_vector          <- var_vector_char_element
}
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by(diamonds,
var_vector = ("cut"),
by_group = "group_var",
include_cumsum = TRUE )
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by(diamonds,
var_vector = ("cut"),
by_group = "group_var",
include_cumsum = TRUE )
freq_by(diamonds,
var_vector = ("cut"),
by_group = "group_var",
include_cumsum = TRUE ) %>% View()
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by(diamonds,
var_vector = ("cut"),
by_group = "group_var",
include_cumsum = TRUE ) %>% View()
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by(diamonds,
var_vector = ("cut"),
by_group = "group_var",
include_cumsum = TRUE ) %>% View()
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by(diamonds,
var_vector = ("cut"),
by_group = "group_var",
include_cumsum = TRUE ) %>% View()
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by(diamonds,
var_vector = ("cut"),
by_group = "group_var",
include_cumsum = TRUE ) %>% View()
names(iris)[-1:2]
names(iris)[-1]
names(iris)[-2]
names(iris)[-4]
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by(diamonds,
var_vector = ("cut"),
by_group = "group_var",
include_cumsum = TRUE )
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by(diamonds,
var_vector = ("cut"),
by_group = "group_var",
include_cumsum = TRUE )
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by(diamonds,
var_vector = ("cut"),
by_group = "group_var",
include_cumsum = TRUE )
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by(diamonds,
var_vector = ("cut"),
by_group = "group_var",
include_cumsum = TRUE )
freq_by(diamonds,
var_vector = ("cut"),
by_group = "group_var",
include_total =  FALSE )
freq_by(diamonds,
var_vector = ("cut"),
by_group = "group_var",
include_total =  FALSE )
freq_by(diamonds,
var_vector = ("cut", "color"),
by_group = "group_var",
include_total =  FALSE )
freq_by(diamonds,
var_vector = c("cut", "color"),
by_group = "group_var",
include_total =  FALSE )
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by(diamonds,
var_vector = c("cut", "color"),
by_group = "group_var",
include_total =  FALSE )
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by(diamonds,
var_vector = c("cut", "color"),
by_group = "group_var",
include_total =  FALSE )
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by(diamonds,
var_vector = c("cut", "color"),
by_group = "group_var",
include_total =  FALSE )
n_columns <- c( TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )
n_columns
n_columns <- c( n_columns, include_p_value )
include_p_value   <- TRUE
n_columns <- c( n_columns, include_p_value )
n_columns
freq_by <- function(dataset, var_vector, by_group = NULL, include_total = TRUE, min_cell_count = 0, htmlout = TRUE, font_css = "font-family: monospace;",
include_p_value   = FALSE,
decimal_percent   = 0,
include_n         = TRUE,
include_percent   = TRUE,
include_cumpct    = FALSE,
include_cumsum    = FALSE,
include_subtotal  = FALSE,
include_n_missing = FALSE) {
# Initial checks and conversion -------------------------------------------
by_group_symbol         <- rlang::sym(by_group)
var_vector_numeric      <- dataset[, var_vector ] %>% dplyr::select_if( is.numeric ) %>% names()
var_vector_char         <- dataset[, var_vector ] %>% dplyr::select_if( function(x) is.factor(x) | is.character(x) ) %>% names()
freq_fun_by <- function(dataset, var_vector_char_element) {
char_element_symbol      <-  rlang::sym(var_vector_char_element)
by_group_vector          <-  dataset               %>% pull(UQ(by_group_symbol))
var_vector_element_pull  <-  dataset               %>% pull(UQ(var_vector_char_element))
# test
chi_test               <- chisq.test( x = by_group_vector, y = var_vector_element_pull  ) %>% tidy()
chi_test$var_vector    <- var_vector_char_element
# count
dataset %>% count(UQ(by_group_symbol), UQ(char_element_symbol)) %>% complete( UQ(by_group_symbol), UQ(char_element_symbol), fill = list( n = 0 )) %>%
group_by(UQ(by_group_symbol))  %>%
mutate( "group" = UQ(by_group_symbol)[1],
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " )
) %>% ungroup() %>%
transmute(     group,  covariate, category,            n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c(TRUE, TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing ))  %>%
plyr::dlply( .variables = "group", function(x) {
names(x)[4:length(names(x))]   <-  paste0( x$group[1], "_", names(x)[4:length(names(x))] )            # The first 3 names group, covariate, category are not changed.
x <- x[,-1]
}   ) %>%
Reduce( function(x, y) left_join(x, y, by = c("covariate", "category" )), . ) -> freq_fun_output
if(include_p_value) {
freq_fun_output$pvalue <- NA
freq_fun_output$pvalue[1] <- chi_test$p.value
}
# freq_fun_total
freq_fun_total <- function(dataset, var_vector_char_element) {
char_element_symbol      <-  rlang::sym(var_vector_char_element)
# count
dataset %>% count( UQ(char_element_symbol)) %>% complete( UQ(char_element_symbol), fill = list( n = 0 )) %>%
mutate(
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup() %>%
transmute(      covariate, category,          n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c( TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )) %>%
ungroup()    ->    freq_fun_total_output
} # end of freq fun total (defined inside freq_fun_by)
# apply freq_fun_total
freq_fun_total(dataset, var_vector_char_element) -> freq_fun_total_output
names(freq_fun_total_output)       <- paste0(names(freq_fun_total_output), "_total") # paste "_total" to names
names(freq_fun_total_output)[1:2]  <- c("covariate", "category")
if (include_total) {
dplyr::full_join(freq_fun_total_output, freq_fun_output, by = c("covariate", "category") ) -> freq_fun_output
}
freq_fun_output
} # end of freq_fun_by and freq_fun_total
# application of freq_fun_by ---------------------------------------------------------
var_vector_char %>%
purrr::map( .f = function(x) freq_fun_by(dataset, x ) ) %>% dplyr::bind_rows()
n_columns <- c( TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )
n_columns <- c( n_columns, include_p_value )
}
freq_by(diamonds, c("cut"), "color")
# function
freq_by <- function(dataset, var_vector, by_group = NULL, include_total = TRUE, min_cell_count = 0, htmlout = TRUE, font_css = "font-family: monospace;",
include_p_value   = FALSE,
decimal_percent   = 0,
include_n         = TRUE,
include_percent   = TRUE,
include_cumpct    = FALSE,
include_cumsum    = FALSE,
include_subtotal  = FALSE,
include_n_missing = FALSE) {
# Initial checks and conversion -------------------------------------------
by_group_symbol         <- rlang::sym(by_group)
var_vector_numeric      <- dataset[, var_vector ] %>% dplyr::select_if( is.numeric ) %>% names()
var_vector_char         <- dataset[, var_vector ] %>% dplyr::select_if( function(x) is.factor(x) | is.character(x) ) %>% names()
freq_fun_by <- function(dataset, var_vector_char_element) {
char_element_symbol      <-  rlang::sym(var_vector_char_element)
by_group_vector          <-  dataset               %>% pull(UQ(by_group_symbol))
var_vector_element_pull  <-  dataset               %>% pull(UQ(var_vector_char_element))
# test
chi_test               <- chisq.test( x = by_group_vector, y = var_vector_element_pull  ) %>% tidy()
chi_test$var_vector    <- var_vector_char_element
# count
dataset %>% count(UQ(by_group_symbol), UQ(char_element_symbol)) %>% complete( UQ(by_group_symbol), UQ(char_element_symbol), fill = list( n = 0 )) %>%
group_by(UQ(by_group_symbol))  %>%
mutate( "group" = UQ(by_group_symbol)[1],
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " )
) %>% ungroup() %>%
transmute(     group,  covariate, category,            n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c(TRUE, TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing ))  %>%
plyr::dlply( .variables = "group", function(x) {
names(x)[4:length(names(x))]   <-  paste0( x$group[1], "_", names(x)[4:length(names(x))] )            # The first 3 names group, covariate, category are not changed.
x <- x[,-1]
}   ) %>%
Reduce( function(x, y) left_join(x, y, by = c("covariate", "category" )), . ) -> freq_fun_output
if(include_p_value) {
freq_fun_output$pvalue <- NA
freq_fun_output$pvalue[1] <- chi_test$p.value
}
# freq_fun_total
freq_fun_total <- function(dataset, var_vector_char_element) {
char_element_symbol      <-  rlang::sym(var_vector_char_element)
# count
dataset %>% count( UQ(char_element_symbol)) %>% complete( UQ(char_element_symbol), fill = list( n = 0 )) %>%
mutate(
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup() %>%
transmute(      covariate, category,          n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c( TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )) %>%
ungroup()    ->    freq_fun_total_output
} # end of freq fun total (defined inside freq_fun_by)
# apply freq_fun_total
freq_fun_total(dataset, var_vector_char_element) -> freq_fun_total_output
names(freq_fun_total_output)       <- paste0(names(freq_fun_total_output), "_total") # paste "_total" to names
names(freq_fun_total_output)[1:2]  <- c("covariate", "category")
if (include_total) {
dplyr::full_join(freq_fun_total_output, freq_fun_output, by = c("covariate", "category") ) -> freq_fun_output
}
freq_fun_output
} # end of freq_fun_by and freq_fun_total
# application of freq_fun_by ---------------------------------------------------------
var_vector_char %>%
purrr::map( .f = function(x) freq_fun_by(dataset, x ) ) %>% dplyr::bind_rows()
n_columns <- c( TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )
n_columns <- c( n_columns, include_p_value )
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by(diamonds, c("cut") )
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
"cut" <- var_vector_char_element
"cut" <- var_vector_char_element
var_vector_char_element <- "cut"
var_vector_char_element
var_vector_char_element <- "cut"
var_vector_char_element
char_element_symbol      <-  rlang::sym(var_vector_char_element)
var_vector_char_element
char_element_symbol
rlang::sym(var_vector_char_element)
char_element_symbol      <-  rlang::sym(var_vector_char_element)
dataset
dataset %>% pull( rlang::UQ(char_element_symbol) )
total_group_pulled       <-  dataset %>% pull( rlang::UQ(char_element_symbol) )
total_group_pulled
chisq.test( total_group_pulled )
chi_test_total           <-  chisq.test( as.character( total_group_pulled ) )
class(   total_group_pulled)
class(   total_group_pulled)
class(   total_group_pulled)
length(   total_group_pulled)
chisq.test( iris$Species)
iris$Species
chisq.test( c("asdf", "bas", "asdf", "asdf" ))
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
