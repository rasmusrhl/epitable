header_total <- header_total[ c(include_n, include_percent, include_cumsum, include_cumpct, include_subtotal, include_n_missing ) ]
levels_group     <-  dataset               %>% pull(UQ(by_group_symbol))
levels_group     <-  levels(levels_group)
html_col_header  <- c(" ", header_total, rep( header_total, times = length(levels_group)) )
if (include_p_value) {
html_col_header  <- c( html_col_header, "p-value")
}
c_group    <-  levels_group
if (include_total) {
c_group  <- c(" ", "Total", levels_group) } else {
c_group <- c(" ", levels_group )
}
if ( include_total ) {
c_group_len <- c(1, length(header_total), rep( length(header_total), times = length(levels_group)) )
} else {
c_group_len <- c(1, rep( length(header_total), times = length(levels_group)) )
}
if (include_p_value) {
c_group_len[ length(c_group_len ) ] <-   c_group_len[ length(c_group_len ) ]  + 1
}
rle_vector <- rle( as.character(table1$covariate) )
rgroup_vector <- rle_vector$values
n_rgroup_vector <- rle_vector$lengths
# table1 <- table1[,-1]
# names(table1) <- html_col_header
alignment  <- c("l", rep("r", ncol(table1) - 1 ))
list(table1, html_col_header, c_group, c_group_len )
htmlTable::htmlTable( x = table1, rnames = FALSE)
# htmlTable::htmlTable()
}
freq_by( dataset = diamonds, var_vector = c("cut", "clarity"), by_group = "color",
include_total = TRUE, include_cumpct = TRUE, include_p_value = FALSE )
write_file(  x = output, path = temp)
freq_by( dataset = diamonds, var_vector = c("cut", "clarity"), by_group = "color",
include_total = TRUE, include_cumpct = TRUE, include_p_value = FALSE ) -> output
write_file(  x = output, path = temp)
utils::browseURL(temp)
freq_by <- function(dataset, var_vector, by_group = NULL,  min_cell_count = 0, htmlout = TRUE, font_css = "font-family: monospace;", decimal_percent   = 0,
include_p_value   = FALSE,
include_total     = TRUE,
include_n         = TRUE,
include_percent   = TRUE,
include_cumpct    = FALSE,
include_cumsum    = FALSE,
include_subtotal  = FALSE,
include_n_missing = FALSE
) {
# Initial checks and conversion -------------------------------------------
by_group_symbol         <- rlang::sym(by_group)
var_vector_numeric      <- dataset[, var_vector ] %>% dplyr::select_if( is.numeric ) %>% names()
var_vector_char         <- dataset[, var_vector ] %>% dplyr::select_if( function(x) is.factor(x) | is.character(x) ) %>% names()
freq_fun_by <- function(dataset, var_vector_char_element) {
char_element_symbol      <-  rlang::sym(var_vector_char_element)
by_group_vector          <-  dataset               %>% pull(UQ(by_group_symbol))
var_vector_element_pull  <-  dataset               %>% pull(UQ(var_vector_char_element))
# test
chi_test               <- chisq.test( x = by_group_vector, y = var_vector_element_pull  ) %>% tidy()
chi_test$var_vector    <- var_vector_char_element
# count
dataset %>% count(UQ(by_group_symbol), UQ(char_element_symbol)) %>% complete( UQ(by_group_symbol), UQ(char_element_symbol), fill = list( n = 0 )) %>%
group_by(UQ(by_group_symbol))  %>%
mutate( "group" = UQ(by_group_symbol)[1],
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " )
) %>% ungroup() %>%
transmute(     group,  covariate, category,            n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c(TRUE, TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing ))  %>%
plyr::dlply( .variables = "group", function(x) {
names(x)[4:length(names(x))]   <-  paste0( x$group[1], "_", names(x)[4:length(names(x))] )            # The first 3 names group, covariate, category are not changed.
x <- x[,-1]
}   ) %>%
Reduce( function(x, y) left_join(x, y, by = c("covariate", "category" )), . ) -> freq_fun_output
if(include_p_value) {
freq_fun_output$pvalue <- NA
freq_fun_output$pvalue[1] <- chi_test$p.value
}
# freq_fun_total
freq_fun_total <- function(dataset, var_vector_char_element) {
# count
dataset %>% count( UQ(char_element_symbol)) %>% complete( UQ(char_element_symbol), fill = list( n = 0 )) %>%
mutate(
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup() %>%
transmute(      covariate, category,          n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c( TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )) %>%
ungroup()    ->    freq_fun_total_output
} # end of freq fun total (defined inside freq_fun_by)
# apply freq_fun_total
freq_fun_total(dataset, var_vector_char_element) -> freq_fun_total_output
names(freq_fun_total_output)       <- paste0(names(freq_fun_total_output), "_total") # paste "_total" to names
names(freq_fun_total_output)[1:2]  <- c("covariate", "category")
if (include_total ) {
dplyr::full_join(freq_fun_total_output, freq_fun_output, by = c("covariate", "category") ) -> freq_fun_output
}
freq_fun_output # is the only object returned from the function
}# end of freq_fun_by freq_fun_total
var_vector %>%
purrr::map(  function(x) freq_fun_by(dataset, x) ) %>% bind_rows() -> table1
# freq_fun_output
header_total <- c("n",                   "%", "Cumulative n", "Cumulative %", "Subtotal" , "n missing")
header_total <- header_total[ c(include_n, include_percent, include_cumsum, include_cumpct, include_subtotal, include_n_missing ) ]
levels_group     <-  dataset               %>% pull(UQ(by_group_symbol))
levels_group     <-  levels(levels_group)
html_col_header  <- c(" ", header_total, rep( header_total, times = length(levels_group)) )
if (include_p_value) {
html_col_header  <- c( html_col_header, "p-value")
}
c_group    <-  levels_group
if (include_total) {
c_group  <- c(" ", "Total", levels_group) } else {
c_group <- c(" ", levels_group )
}
if ( include_total ) {
c_group_len <- c(1, length(header_total), rep( length(header_total), times = length(levels_group)) )
} else {
c_group_len <- c(1, rep( length(header_total), times = length(levels_group)) )
}
if (include_p_value) {
c_group_len[ length(c_group_len ) ] <-   c_group_len[ length(c_group_len ) ]  + 1
}
rle_vector <- rle( as.character(table1$covariate) )
rgroup_vector <- rle_vector$values
n_rgroup_vector <- rle_vector$lengths
# table1 <- table1[,-1]
# names(table1) <- html_col_header
alignment  <- c("l", rep("r", ncol(table1) - 1 ))
list(table1, html_col_header, c_group, c_group_len )
htmlTable::htmlTable( x = table1, rnames = FALSE,
rgroup = rgroup_vector,
n.rgroup = n_rgroup_vector  )
# htmlTable::htmlTable()
}
freq_by( dataset = diamonds, var_vector = c("cut", "clarity"), by_group = "color",
include_total = TRUE, include_cumpct = TRUE, include_p_value = FALSE ) -> output
write_file(  x = output, path = temp)
utils::browseURL(temp)
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by <- function(dataset, var_vector, by_group = NULL,  min_cell_count = 0, htmlout = TRUE, font_css = "font-family: monospace;", decimal_percent   = 0,
include_p_value   = FALSE,
include_total     = TRUE,
include_n         = TRUE,
include_percent   = TRUE,
include_cumpct    = FALSE,
include_cumsum    = FALSE,
include_subtotal  = FALSE,
include_n_missing = FALSE
) {
# Initial checks and conversion -------------------------------------------
by_group_symbol         <- rlang::sym(by_group)
var_vector_numeric      <- dataset[, var_vector ] %>% dplyr::select_if( is.numeric ) %>% names()
var_vector_char         <- dataset[, var_vector ] %>% dplyr::select_if( function(x) is.factor(x) | is.character(x) ) %>% names()
freq_fun_by <- function(dataset, var_vector_char_element) {
char_element_symbol      <-  rlang::sym(var_vector_char_element)
by_group_vector          <-  dataset               %>% pull(UQ(by_group_symbol))
var_vector_element_pull  <-  dataset               %>% pull(UQ(var_vector_char_element))
# test
chi_test               <- chisq.test( x = by_group_vector, y = var_vector_element_pull  ) %>% tidy()
chi_test$var_vector    <- var_vector_char_element
# count
dataset %>% count(UQ(by_group_symbol), UQ(char_element_symbol)) %>% complete( UQ(by_group_symbol), UQ(char_element_symbol), fill = list( n = 0 )) %>%
group_by(UQ(by_group_symbol))  %>%
mutate( "group" = UQ(by_group_symbol)[1],
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " )
) %>% ungroup() %>%
transmute(     group,  covariate, category,            n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c(TRUE, TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing ))  %>%
plyr::dlply( .variables = "group", function(x) {
names(x)[4:length(names(x))]   <-  paste0( x$group[1], "_", names(x)[4:length(names(x))] )            # The first 3 names group, covariate, category are not changed.
x <- x[,-1]
}   ) %>%
Reduce( function(x, y) left_join(x, y, by = c("covariate", "category" )), . ) -> freq_fun_output
if(include_p_value) {
freq_fun_output$pvalue <- NA
freq_fun_output$pvalue[1] <- chi_test$p.value
}
# freq_fun_total
freq_fun_total <- function(dataset, var_vector_char_element) {
# count
dataset %>% count( UQ(char_element_symbol)) %>% complete( UQ(char_element_symbol), fill = list( n = 0 )) %>%
mutate(
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup() %>%
transmute(      covariate, category,          n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c( TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )) %>%
ungroup()    ->    freq_fun_total_output
} # end of freq fun total (defined inside freq_fun_by)
# apply freq_fun_total
freq_fun_total(dataset, var_vector_char_element) -> freq_fun_total_output
names(freq_fun_total_output)       <- paste0(names(freq_fun_total_output), "_total") # paste "_total" to names
names(freq_fun_total_output)[1:2]  <- c("covariate", "category")
if (include_total ) {
dplyr::full_join(freq_fun_total_output, freq_fun_output, by = c("covariate", "category") ) -> freq_fun_output
}
freq_fun_output # is the only object returned from the function
}# end of freq_fun_by freq_fun_total
var_vector %>%
purrr::map(  function(x) freq_fun_by(dataset, x) ) %>% bind_rows() -> table1
# freq_fun_output
header_total <- c("n",                   "%", "Cumulative n", "Cumulative %", "Subtotal" , "n missing")
header_total <- header_total[ c(include_n, include_percent, include_cumsum, include_cumpct, include_subtotal, include_n_missing ) ]
levels_group     <-  dataset               %>% pull(UQ(by_group_symbol))
levels_group     <-  levels(levels_group)
html_col_header  <- c(" ", header_total, rep( header_total, times = length(levels_group)) )
if (include_p_value) {
html_col_header  <- c( html_col_header, "p-value")
}
c_group    <-  levels_group
if (include_total) {
c_group  <- c(" ", "Total", levels_group) } else {
c_group <- c(" ", levels_group )
}
if ( include_total ) {
c_group_len <- c(1, length(header_total), rep( length(header_total), times = length(levels_group)) )
} else {
c_group_len <- c(1, rep( length(header_total), times = length(levels_group)) )
}
if (include_p_value) {
c_group_len[ length(c_group_len ) ] <-   c_group_len[ length(c_group_len ) ]  + 1
}
rle_vector <- rle( as.character(table1$covariate) )
rgroup_vector <- rle_vector$values
n_rgroup_vector <- rle_vector$lengths
# table1 <- table1[,-1]
# names(table1) <- html_col_header
alignment  <- c("l", rep("r", ncol(table1) - 1 ))
list(table1, html_col_header, c_group, c_group_len )
htmlTable::htmlTable( x = table1, rnames = FALSE,
rgroup = rgroup_vector,
n.rgroup = n_rgroup_vector,
cgroup   = c_group,
n.cgroup = c_group_len )
# htmlTable::htmlTable()
}
freq_by( dataset = diamonds, var_vector = c("cut", "clarity"), by_group = "color",
include_total = TRUE, include_cumpct = TRUE, include_p_value = FALSE ) -> output
write_file(  x = output, path = temp)
utils::browseURL(temp)
freq_by <- function(dataset, var_vector, by_group = NULL,  min_cell_count = 0, htmlout = TRUE, font_css = "font-family: monospace;", decimal_percent   = 0,
include_p_value   = FALSE,
include_total     = TRUE,
include_n         = TRUE,
include_percent   = TRUE,
include_cumpct    = FALSE,
include_cumsum    = FALSE,
include_subtotal  = FALSE,
include_n_missing = FALSE
) {
# Initial checks and conversion -------------------------------------------
by_group_symbol         <- rlang::sym(by_group)
var_vector_numeric      <- dataset[, var_vector ] %>% dplyr::select_if( is.numeric ) %>% names()
var_vector_char         <- dataset[, var_vector ] %>% dplyr::select_if( function(x) is.factor(x) | is.character(x) ) %>% names()
freq_fun_by <- function(dataset, var_vector_char_element) {
char_element_symbol      <-  rlang::sym(var_vector_char_element)
by_group_vector          <-  dataset               %>% pull(UQ(by_group_symbol))
var_vector_element_pull  <-  dataset               %>% pull(UQ(var_vector_char_element))
# test
chi_test               <- chisq.test( x = by_group_vector, y = var_vector_element_pull  ) %>% tidy()
chi_test$var_vector    <- var_vector_char_element
# count
dataset %>% count(UQ(by_group_symbol), UQ(char_element_symbol)) %>% complete( UQ(by_group_symbol), UQ(char_element_symbol), fill = list( n = 0 )) %>%
group_by(UQ(by_group_symbol))  %>%
mutate( "group" = UQ(by_group_symbol)[1],
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " )
) %>% ungroup() %>%
transmute(     group,  covariate, category,            n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c(TRUE, TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing ))  %>%
plyr::dlply( .variables = "group", function(x) {
names(x)[4:length(names(x))]   <-  paste0( x$group[1], "_", names(x)[4:length(names(x))] )            # The first 3 names group, covariate, category are not changed.
x <- x[,-1]
}   ) %>%
Reduce( function(x, y) left_join(x, y, by = c("covariate", "category" )), . ) -> freq_fun_output
if(include_p_value) {
freq_fun_output$pvalue <- NA
freq_fun_output$pvalue[1] <- chi_test$p.value
}
# freq_fun_total
freq_fun_total <- function(dataset, var_vector_char_element) {
# count
dataset %>% count( UQ(char_element_symbol)) %>% complete( UQ(char_element_symbol), fill = list( n = 0 )) %>%
mutate(
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup() %>%
transmute(      covariate, category,          n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c( TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )) %>%
ungroup()    ->    freq_fun_total_output
} # end of freq fun total (defined inside freq_fun_by)
# apply freq_fun_total
freq_fun_total(dataset, var_vector_char_element) -> freq_fun_total_output
names(freq_fun_total_output)       <- paste0(names(freq_fun_total_output), "_total") # paste "_total" to names
names(freq_fun_total_output)[1:2]  <- c("covariate", "category")
if (include_total ) {
dplyr::full_join(freq_fun_total_output, freq_fun_output, by = c("covariate", "category") ) -> freq_fun_output
}
freq_fun_output # is the only object returned from the function
}# end of freq_fun_by freq_fun_total
var_vector %>%
purrr::map(  function(x) freq_fun_by(dataset, x) ) %>% bind_rows() -> table1
# freq_fun_output
header_total <- c("n",                   "%", "Cumulative n", "Cumulative %", "Subtotal" , "n missing")
header_total <- header_total[ c(include_n, include_percent, include_cumsum, include_cumpct, include_subtotal, include_n_missing ) ]
levels_group     <-  dataset               %>% pull(UQ(by_group_symbol))
levels_group     <-  levels(levels_group)
html_col_header  <- c(" ", header_total, rep( header_total, times = length(levels_group)) )
if (include_p_value) {
html_col_header  <- c( html_col_header, "p-value")
}
c_group    <-  levels_group
if (include_total) {
c_group  <- c(" ", "Total", levels_group) } else {
c_group <- c(" ", levels_group )
}
if ( include_total ) {
c_group_len <- c(1, length(header_total), rep( length(header_total), times = length(levels_group)) )
} else {
c_group_len <- c(1, rep( length(header_total), times = length(levels_group)) )
}
if (include_p_value) {
c_group_len[ length(c_group_len ) ] <-   c_group_len[ length(c_group_len ) ]  + 1
}
rle_vector <- rle( as.character(table1$covariate) )
rgroup_vector <- rle_vector$values
n_rgroup_vector <- rle_vector$lengths
alignment  <- c("l", rep("r", ncol(table1) - 1 ))
list(table1, html_col_header, c_group, c_group_len )
table1         <- table1[,-1]
names(table1)  <- html_col_header
htmlTable::htmlTable( x = table1, rnames = FALSE,
rgroup = rgroup_vector,
n.rgroup = n_rgroup_vector,
cgroup   = c_group,
n.cgroup = c_group_len )
# htmlTable::htmlTable()
}
freq_by( dataset = diamonds, var_vector = c("cut", "clarity"), by_group = "color",
include_total = TRUE, include_cumpct = TRUE, include_p_value = FALSE ) -> output
write_file(  x = output, path = temp)
utils::browseURL(temp)
freq_by <- function(dataset, var_vector, by_group = NULL,  min_cell_count = 0, htmlout = TRUE, font_css = "font-family: monospace;", decimal_percent   = 0,
include_p_value   = FALSE,
include_total     = TRUE,
include_n         = TRUE,
include_percent   = TRUE,
include_cumpct    = FALSE,
include_cumsum    = FALSE,
include_subtotal  = FALSE,
include_n_missing = FALSE
) {
# Initial checks and conversion -------------------------------------------
by_group_symbol         <- rlang::sym(by_group)
var_vector_numeric      <- dataset[, var_vector ] %>% dplyr::select_if( is.numeric ) %>% names()
var_vector_char         <- dataset[, var_vector ] %>% dplyr::select_if( function(x) is.factor(x) | is.character(x) ) %>% names()
freq_fun_by <- function(dataset, var_vector_char_element) {
char_element_symbol      <-  rlang::sym(var_vector_char_element)
by_group_vector          <-  dataset               %>% pull(UQ(by_group_symbol))
var_vector_element_pull  <-  dataset               %>% pull(UQ(var_vector_char_element))
# test
chi_test               <- chisq.test( x = by_group_vector, y = var_vector_element_pull  ) %>% tidy()
chi_test$var_vector    <- var_vector_char_element
# count
dataset %>% count(UQ(by_group_symbol), UQ(char_element_symbol)) %>% complete( UQ(by_group_symbol), UQ(char_element_symbol), fill = list( n = 0 )) %>%
group_by(UQ(by_group_symbol))  %>%
mutate( "group" = UQ(by_group_symbol)[1],
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " )
) %>% ungroup() %>%
transmute(     group,  covariate, category,            n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c(TRUE, TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing ))  %>%
plyr::dlply( .variables = "group", function(x) {
names(x)[4:length(names(x))]   <-  paste0( x$group[1], "_", names(x)[4:length(names(x))] )            # The first 3 names group, covariate, category are not changed.
x <- x[,-1]
}   ) %>%
Reduce( function(x, y) left_join(x, y, by = c("covariate", "category" )), . ) -> freq_fun_output
if(include_p_value) {
freq_fun_output$pvalue <- NA
freq_fun_output$pvalue[1] <- chi_test$p.value
}
# freq_fun_total
freq_fun_total <- function(dataset, var_vector_char_element) {
# count
dataset %>% count( UQ(char_element_symbol)) %>% complete( UQ(char_element_symbol), fill = list( n = 0 )) %>%
mutate(
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup() %>%
transmute(      covariate, category,          n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c( TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )) %>%
ungroup()    ->    freq_fun_total_output
} # end of freq fun total (defined inside freq_fun_by)
# apply freq_fun_total
freq_fun_total(dataset, var_vector_char_element) -> freq_fun_total_output
names(freq_fun_total_output)       <- paste0(names(freq_fun_total_output), "_total") # paste "_total" to names
names(freq_fun_total_output)[1:2]  <- c("covariate", "category")
if (include_total ) {
dplyr::full_join(freq_fun_total_output, freq_fun_output, by = c("covariate", "category") ) -> freq_fun_output
}
freq_fun_output # is the only object returned from the function
}# end of freq_fun_by freq_fun_total
var_vector %>%
purrr::map(  function(x) freq_fun_by(dataset, x) ) %>% bind_rows() -> table1
# freq_fun_output
header_total <- c("n",                   "%", "Cumulative n", "Cumulative %", "Subtotal" , "n missing")
header_total <- header_total[ c(include_n, include_percent, include_cumsum, include_cumpct, include_subtotal, include_n_missing ) ]
levels_group     <-  dataset               %>% pull(UQ(by_group_symbol))
levels_group     <-  levels(levels_group)
html_col_header  <- c(" ", header_total, rep( header_total, times = length(levels_group)) )
if (include_p_value) {
html_col_header  <- c( html_col_header, "p-value")
}
c_group    <-  levels_group
if (include_total) {
c_group  <- c(" ", "Total", levels_group) } else {
c_group <- c(" ", levels_group )
}
if ( include_total ) {
c_group_len <- c(1, length(header_total), rep( length(header_total), times = length(levels_group)) )
} else {
c_group_len <- c(1, rep( length(header_total), times = length(levels_group)) )
}
if (include_p_value) {
c_group_len[ length(c_group_len ) ] <-   c_group_len[ length(c_group_len ) ]  + 1
}
rle_vector <- rle( as.character(table1$covariate) )
rgroup_vector <- rle_vector$values
n_rgroup_vector <- rle_vector$lengths
alignment  <- c("l", rep("r", ncol(table1) - 1 ))
list(table1, html_col_header, c_group, c_group_len )
table1         <- table1[,-1]
names(table1)  <- html_col_header
htmlTable::htmlTable( x = table1, rnames = FALSE,
rgroup = rgroup_vector,
n.rgroup = n_rgroup_vector,
cgroup   = c_group,
n.cgroup = c_group_len,
align    = alignment)
# htmlTable::htmlTable()
}
freq_by( dataset = diamonds, var_vector = c("cut", "clarity"), by_group = "color",
include_total = TRUE, include_cumpct = TRUE, include_p_value = FALSE ) -> output
write_file(  x = output, path = temp)
utils::browseURL(temp)
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
freq_by( dataset = diamonds, var_vector = c("cut", "clarity"), by_group = "color",
include_total = TRUE, include_cumpct = TRUE, include_p_value = TRUE ) -> output
write_file(  x = output, path = temp)
utils::browseURL(temp)
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
