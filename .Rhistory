}
}
add_reference_levels(model1)
tidy(model1)
broom::tidy(model1)
broom::tidy(model1, exponentiate = TRUE )
add_reference_levels(model1)
add_reference_levels(model1)
broom::tidy(model1, exponentiate = TRUE )
model_to_html <- function( univariate_models_list, model_class = "coxph" ) {
if(! is.list(univariate_models_list)) {
stop ("univariate_models_list must be a list")
}
if(model_class == "coxph") {
purrr::map( univariate_models_list, class ) %>%
purrr::map( function(x) "coxph" %in% x ) %>%
unlist() %>%
all() -> are_all_models_coxph
if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
}
univariate_models_list %>%
purrr::map(  add_reference_levels )
}
add_reference_levels(model1 )
add_reference_levels(model1 )
add_reference_levels(model1 ) -> output
output
output$conf.high
print( output$conf.high )
source('C:/Users/rahela/Desktop/epitable/R/print_model_to_html.R', echo=TRUE)
print( output$conf.high, na.print = "1"  )
print( output$conf.high, na.print = "-"  )
print( roun( output$conf.high, 2) , na.print = "-"  )
print( round( output$conf.high, 2) , na.print = "-"  )
print( round( output$conf.high, 3) , na.print = "-"  )
model_to_html(model_list)
model_to_html(model_list) %>% bind_rows()
model_to_html(model_list) %>% bind_rows()
model_to_html(model_list) %>% rbind()
model_to_html(model_list) %>% -> out1
out1
model_to_html(model_list) %>%  out1
model_to_html(model_list)
model_to_html(model_list)  %>% unlist()
model_to_html(model_list) -> output
output
output %>% bind_rows()
model_to_html(model_list) %>% bind_rows()
add_reference_levels <- function( model_object ) {
if (   class( model_object ) == "coxph" ) {
# extract pretty categorical variables (used for presentation, including ref category)
cat_variables_n_l      <-  model_object$xlevels
cat_variables_n        <-  names( cat_variables_n_l )
cat_variables_l        <-  map_dbl(cat_variables_n_l,   length )
cat_variables_output   <-  map2( cat_variables_n, cat_variables_l, .f = function(x,y ) rep( x, each = y)) %>% unlist()
# extract pretty categorical categories (used for presentation)
cat_categories         <- model_object$xlevels %>% unlist() %>% as.character()
# combine pretty categorical variables and numeric variables
term_column_numeric    <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
pretty_variables       <- c( cat_variables_output, term_column_numeric )
pretty_categories      <- c( cat_categories, term_column_numeric )
column_type            <- c( rep( "char_or_factor", length(cat_variables_output ) ),
rep( "numeric"       , length( term_column_numeric ) ) )
# create terms column in style of model output (used for join)
term_column_categoric  <- map2( cat_variables_n, cat_variables_n_l, function(x,y) paste0(x,y )  )  %>% unlist()
left_column            <-  data.frame( term = c( term_column_categoric, term_column_numeric ) )
left_column$variables  <-  pretty_variables
left_column$categories <-  pretty_categories
left_column$type       <-  column_type
# the full covariate list is left joined with the statistical values
tidy_model_output          <- broom::tidy(model_object, exponentiate = TRUE )
suppressWarnings( dplyr::left_join( left_column, tidy_model_output, "term" ) ) -> add_ref_output
add_ref_output
}
}
model_to_html(model_list) %>% bind_rows()
model1
model_to_html(model1)
class( model1 )
model_to_html <- function( univariate_models_list, model_class = "coxph" ) {
if(! is.list(univariate_models_list)) {
stop ("univariate_models_list must be a list")
}
if(model_class == "coxph") {
purrr::map( univariate_models_list, class ) %>%
purrr::map( function(x) "coxph" %in% x ) %>%
unlist() %>%
all() -> are_all_models_coxph
if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
}
univariate_models_list %>%
purrr::map(  add_reference_levels )
}
model_to_html(model1)
model_to_html(list(model1))
! is.list(model1 ))
! is.list(model1 )
!is.list(model1 )
is.list(model1 )
class(model1)
class(model1)=="list"
!class(model1)=="list"
model_to_html <- function( univariate_models_list, model_class = "coxph" ) {
if(  !class(model1)=="list") {
stop ("univariate_models_list must be a list")
}
if(model_class == "coxph") {
purrr::map( univariate_models_list, class ) %>%
purrr::map( function(x) "coxph" %in% x ) %>%
unlist() %>%
all() -> are_all_models_coxph
if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
}
univariate_models_list %>%
purrr::map(  add_reference_levels )
}
model_to_html( model1  )
model_to_html( list(model1  ) )
list(model1  )
class( list(model1  ) )
class( list(model1  ) )  == "list"
model_to_html <- function( univariate_models_list, model_class = "coxph" ) {
if(  !class(univariate_models_list)=="list") {
stop ("univariate_models_list must be a list")
}
if(model_class == "coxph") {
purrr::map( univariate_models_list, class ) %>%
purrr::map( function(x) "coxph" %in% x ) %>%
unlist() %>%
all() -> are_all_models_coxph
if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
}
univariate_models_list %>%
purrr::map(  add_reference_levels )
}
model_to_html( list(model1  ) )
model_to_html( (model1  ) )
test_that("User input is correct",  {
# expect error if univariate_models_list is not list
testthat::expect_error( model_to_html( univariate_models_list = "asdf") )
# expect error if univariate_models_list contain not coxph element
testthat::expect_error( model_to_html( univariate_models_list = model_list_with_extra ))
} )
test_that("User input is correct",  {
# expect error if univariate_models_list is not list
testthat::expect_error( model_to_html( univariate_models_list = "asdf") )
# expect error if univariate_models_list contain not coxph element
testthat::expect_error( model_to_html( univariate_models_list = model_list_with_extra ))
} )
model_to_html <- function( univariate_models_list, model_class = "coxph", simple = TRUE ) {
if(  !class(univariate_models_list)=="list") {
stop ("univariate_models_list must be a list")
}
if(model_class == "coxph") {
purrr::map( univariate_models_list, class ) %>%
purrr::map( function(x) "coxph" %in% x ) %>%
unlist() %>%
all() -> are_all_models_coxph
if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
}
univariate_models_list %>%
purrr::map(  add_reference_levels )  %>% bind_rows()
}
model_to_html( (model1  ) )
model_to_html( list(model1  ) )
model_to_html <- function( univariate_models_list, model_class = "coxph", simple = TRUE ) {
if(  !class(univariate_models_list)=="list") {
stop ("univariate_models_list must be a list")
}
if(model_class == "coxph") {
purrr::map( univariate_models_list, class ) %>%
purrr::map( function(x) "coxph" %in% x ) %>%
unlist() %>%
all() -> are_all_models_coxph
if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
}
univariate_models_list %>%
purrr::map(  add_reference_levels )  %>% bind_rows() -> univariate_models
}
library(dplyr)
glm_linear <- glm( Sepal.Width ~  Petal.Width + Species, data = iris)
broom::tidy( glm_linear, conf.int = TRUE  )
broom::tidy( glm_linear, conf.int = TRUE, exponentiate = NULL   )
broom::tidy( model1 )
model1      <- survival::coxph( survival::Surv( time = time, event = status==1) ~ age_bin + factor(sex) + ph_bin + wt.loss, data = df )
df         <- lung
df$age_bin <- Hmisc::cut2( df$age, g = 5)
df$ph_bin  <- Hmisc::cut2( df$ph.karno, g = 5)
df$sex     <- factor( df$sex)
# test models
# single model
model1      <- survival::coxph( survival::Surv( time = time, event = status==1) ~ age_bin + factor(sex) + ph_bin + wt.loss, data = df )
df         <- lung
library(survival)
df         <- lung
df$age_bin <- Hmisc::cut2( df$age, g = 5)
df$ph_bin  <- Hmisc::cut2( df$ph.karno, g = 5)
df$sex     <- factor( df$sex)
library(survival)
df         <- lung
df$age_bin <- Hmisc::cut2( df$age, g = 5)
df$ph_bin  <- Hmisc::cut2( df$ph.karno, g = 5)
df$sex     <- factor( df$sex)
model1      <- survival::coxph( survival::Surv( time = time, event = status==1) ~ age_bin + factor(sex) + ph_bin + wt.loss, data = df )
library(broom)
broom::tidy( model1)
glm_logistic
diamonds <- ggplot2::diamonds
diamonds$color <- factor(diamonds$color, ordered = FALSE)
diamonds$clarity <- factor(diamonds$clarity, ordered = FALSE)
glm_logistic <- glm( cut=="Ideal" ~  color + clarity + x , data = diamonds, family = "binomial")
glm_linear <- glm( Sepal.Width ~  Petal.Width + Species, data = iris)
broom::tidy( glm_logistic )
broom::confint_tidy(glm_logistic)
broom::confint_tidy(glm_logistic, exponentiate = TRUE )
broom::confint_tidy(glm_logistic, exponentiate = TRUE )
broom::confint_tidy(glm_logistic)
broom::tidy( glm_logistic )
glance( glm_logistic)
model1
broom::tidy( model1 )
broom::tidy( glm_logistic )
broom::tidy( model1, exponentiate = TRUE )
broom::tidy( glm_logistic, exponentiate = TRUE  )
tidy.coxph
broom:::tidy.coxph
broom:::tidy.coxph()
broom:::tidy.coxph
model1
broom::tidy( model1, exponentiate = TRUE )
broom::tidy( glm_logistic, exponentiate = TRUE  )
broom::tidy( glm_logistic, exponentiate = TRUE, conf.int = TRUE  )
broom::tidy( glm_logistic, exponentiate = TRUE )
broom::tidy( model1, exponentiate = TRUE, conf.int = TRUE  )
broom::tidy( model1,  conf.int = TRUE  )
broom::tidy( glm_linear )
broom::tidy( glm_linear, conf.int = TRUE )
list(model1, glm_linear, glm_logistic) %>%
map( class)
library(purrr)
list(model1, glm_linear, glm_logistic) %>%
map( class)
broom::tidy( glm_linear,   conf.int = TRUE )
broom::tidy( glm_logistic, conf.int = TRUE )
add_reference_levels <- function( model_object, exponentiate = FALSE  ) {
if ("ordered" %in% attr(model_object$terms, "dataClasses")) {
stop ("add_reference_levels() does not support ordered factors in the model object. Check the class of the covariates in the model and ensure that they are not class 'ordered' ")
}
# if ( "coxph" %in% class(model_object) & is.null(exponentiate) ) {
#  exponentiate <- TRUE     } else if ( model_object$family$link %in% "logit" & is.null(exponentiate ) {
#  exponentiate <- TRUE
#   }
# extract pretty categorical variables (used for presentation, including ref category)
cat_variables_n_l      <-  model_object$xlevels
cat_variables_n        <-  names( cat_variables_n_l )
cat_variables_l        <-  map_dbl(cat_variables_n_l,   length )
cat_variables_output   <-  map2( cat_variables_n, cat_variables_l, .f = function(x,y ) rep( x, each = y)) %>% unlist()
# extract pretty categorical categories (used for presentation)
cat_categories         <- model_object$xlevels %>% unlist() %>% as.character()
# combine pretty categorical variables and numeric variables
term_column_numeric    <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
pretty_variables       <- c( cat_variables_output, term_column_numeric )
pretty_categories      <- c( cat_categories, term_column_numeric )
column_type            <- c( rep( "char_or_factor", length(cat_variables_output ) ),
rep( "numeric"       , length( term_column_numeric ) ) )
# create terms column in style of model output (used for join)
term_column_categoric  <- map2( cat_variables_n, cat_variables_n_l, function(x,y) paste0(x,y )  )  %>% unlist()
left_column            <-  data.frame( term = c( term_column_categoric, term_column_numeric ) )
left_column$variables  <-  pretty_variables
left_column$categories <-  pretty_categories
left_column$type       <-  column_type
left_column$n          <-  if ( "coxph" %in% class(model_object)) model_object$n else {
if ( "glm" %in% class(model_object)) nrow( model_object$model) }
# the full covariate list is left joined with the statistical values
if (  "glm" %in% class(model_object)) {
tidy_model_output <- broom::tidy( model_object, exponentiate = exponentiate, conf.int = TRUE)
} else if ( "coxph" %in% class(model_object)) {
tidy_model_output <- broom::tidy( model_object, exponentiate = exponentiate )
}
suppressWarnings( dplyr::left_join( left_column, tidy_model_output, "term" ) ) -> add_ref_output
add_ref_output
}
add_reference_levels <- function( model_object, exponentiate = FALSE  ) {
if ("ordered" %in% attr(model_object$terms, "dataClasses")) {
stop ("add_reference_levels() does not support ordered factors in the model object. Check the class of the covariates in the model and ensure that they are not class 'ordered' ")
}
# in future maybe make implement autochoice of exponentiate if exponentiate is NULL.
# if ( "coxph" %in% class(model_object) & is.null(exponentiate) ) {
#  exponentiate <- TRUE     } else if ( model_object$family$link %in% "logit" & is.null(exponentiate ) {
#  exponentiate <- TRUE
#   }
# extract pretty categorical variables (used for presentation, including ref category)
cat_variables_n_l      <-  model_object$xlevels
cat_variables_n        <-  names( cat_variables_n_l )
cat_variables_l        <-  map_dbl(cat_variables_n_l,   length )
cat_variables_output   <-  map2( cat_variables_n, cat_variables_l, .f = function(x,y ) rep( x, each = y)) %>% unlist()
# extract pretty categorical categories (used for presentation)
cat_categories         <- model_object$xlevels %>% unlist() %>% as.character()
# combine pretty categorical variables and numeric variables
term_column_numeric    <- names( attr( model_object$terms, "dataClasses" )[
attr( model_object$terms, "dataClasses" )  == "numeric"  ]  )
pretty_variables       <- c( cat_variables_output, term_column_numeric )
pretty_categories      <- c( cat_categories, term_column_numeric )
column_type            <- c( rep( "char_or_factor", length(cat_variables_output ) ),
rep( "numeric"       , length( term_column_numeric ) ) )
# create terms column in style of model output (used for join)
term_column_categoric  <- map2( cat_variables_n, cat_variables_n_l, function(x,y) paste0(x,y )  )  %>% unlist()
left_column            <-  data.frame( term = c( term_column_categoric, term_column_numeric ) )
left_column$variables  <-  pretty_variables
left_column$categories <-  pretty_categories
left_column$type       <-  column_type
left_column$n          <-  if ( "coxph" %in% class(model_object)) model_object$n else {
if ( "glm" %in% class(model_object)) nrow( model_object$model) }
# the full covariate list is left joined with the statistical values
if (  "glm" %in% class(model_object)) {
tidy_model_output <- broom::tidy( model_object, exponentiate = exponentiate, conf.int = TRUE)
} else if ( "coxph" %in% class(model_object)) {
tidy_model_output <- broom::tidy( model_object, exponentiate = exponentiate )
}
suppressWarnings( dplyr::left_join( left_column, tidy_model_output, "term" ) ) -> add_ref_output
add_ref_output
}
add_reference_levels(model1)
add_reference_levels(glm_linear)
add_reference_levels(glm_logistic)
devtools::use_testthat()
library(survival)
df         <- lung
df$age_bin <- Hmisc::cut2( df$age, g = 5)
df$ph_bin  <- Hmisc::cut2( df$ph.karno, g = 5)
df$sex     <- factor( df$sex)
model1      <- survival::coxph( survival::Surv( time = time, event = status==1) ~ age_bin + factor(sex) + ph_bin + wt.loss, data = df )
diamonds <- ggplot2::diamonds
diamonds$color <- factor(diamonds$color, ordered = FALSE)
diamonds$clarity <- factor(diamonds$clarity, ordered = FALSE)
glm_logistic <- glm( cut=="Ideal" ~  color + clarity + x , data = diamonds, family = "binomial")
glm_linear <- glm( Sepal.Width ~  Petal.Width + Species, data = iris)
model_to_html <- function( univariate_models_list, simple = TRUE, decimals_estimate = 2 ) {
model_to_html <- function( univariate_models_list, simple = TRUE, decimals_estimate = 2 ) {
# if(  ! "list" %in% class(univariate_models_list) ) {
#   stop ("univariate_models_list must be a list")
# }
# if(model_class == "coxph") {
#   purrr::map( univariate_models_list, class ) %>%
#    purrr::map( function(x) "coxph" %in% x ) %>%
#    unlist() %>%
#    all() -> are_all_models_coxph
#  if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
# }
tidy_up_model_df <- function(univariate_models) {
univariate_models %>%
transmute( variables,
categories,
estimate = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low,  decimals_estimate ), nsmall = decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate ) )
)  -> tidy_model
tidy_model$estimate[ stringr::str_detect(  string = tidy_model$estimate,  pattern =  "NA") ] <- "1"
tidy_model$CI[ stringr::str_detect(  string = tidy_model$CI,  pattern =  "NA") ]             <- "Ref"
tidy_model
}
to_html <- function(tidy_model) {
rgroup_vector       <-   stringr::str_to_title( rle(tidy_model$variables)$values )
n_rgroup_vector     <-   rle(tidy_model$variables)$lengths
rgroup_vector[ n_rgroup_vector == 1 ]   <- "&nbsp;" # single rows dont need rgroup header
css_rgroup      <- "font-style: italic;padding-top: 0.4cm;padding-right: 0.4cm;padding-bottom: 0.2cm;"
tidy_model      <- tidy_model[,-1]
css_matrix      <- matrix(data = "padding-left: 0.5cm; padding-right: 0.5cm;",
nrow = nrow(tidy_model),
ncol = ncol(tidy_model))
css_matrix[, 1] <- "padding-left: 0.4cm; padding-right: 0.3cm;"
htmlTable::htmlTable(
x          = tidy_model ,
rnames     = FALSE,
rgroup     = rgroup_vector,
n.rgroup   = n_rgroup_vector,
align      = c("l","r"),
css.rgroup = css_rgroup,
css.cell   = css_matrix
)
}
univariate_models_list %>%
purrr::map( add_reference_levels ) %>%
purrr::map( tidy_up_model_df     ) %>%
purrr::map( to_html              )
}
model_to_html(univariate_models_list = glm_logistic)
model_to_html(univariate_models_list = glm_linear)
model_to_html(univariate_models_list = model1)
model_to_html(univariate_models_list = list(glm_logistic)  )
model_to_html(univariate_models_list = list(glm_linear)  )
model_to_html(univariate_models_list = list(model1)  )
list(model1) %>%
purrr::map( add_reference_levels ) %>%
purrr::map( tidy_up_model_df     ) %>%
purrr::map( to_html              )
tidy_up_model_df <- function(univariate_models) {
univariate_models %>%
transmute( variables,
categories,
estimate = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low,  decimals_estimate ), nsmall = decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate ) )
)  -> tidy_model
tidy_model$estimate[ stringr::str_detect(  string = tidy_model$estimate,  pattern =  "NA") ] <- "1"
tidy_model$CI[ stringr::str_detect(  string = tidy_model$CI,  pattern =  "NA") ]             <- "Ref"
tidy_model
}
list(model1) %>%
purrr::map( add_reference_levels ) %>%
purrr::map( tidy_up_model_df     )
decimals_estimate <- 2
list(model1) %>%
purrr::map( add_reference_levels ) %>%
purrr::map( tidy_up_model_df     )
list(model1) %>%
purrr::map( add_reference_levels ) %>%
purrr::map( tidy_up_model_df     ) %>%
purrr::map( to_html              )
to_html <- function(tidy_model) {
rgroup_vector       <-   stringr::str_to_title( rle(tidy_model$variables)$values )
n_rgroup_vector     <-   rle(tidy_model$variables)$lengths
rgroup_vector[ n_rgroup_vector == 1 ]   <- "&nbsp;" # single rows dont need rgroup header
css_rgroup      <- "font-style: italic;padding-top: 0.4cm;padding-right: 0.4cm;padding-bottom: 0.2cm;"
tidy_model      <- tidy_model[,-1]
css_matrix      <- matrix(data = "padding-left: 0.5cm; padding-right: 0.5cm;",
nrow = nrow(tidy_model),
ncol = ncol(tidy_model))
css_matrix[, 1] <- "padding-left: 0.4cm; padding-right: 0.3cm;"
htmlTable::htmlTable(
x          = tidy_model ,
rnames     = FALSE,
rgroup     = rgroup_vector,
n.rgroup   = n_rgroup_vector,
align      = c("l","r"),
css.rgroup = css_rgroup,
css.cell   = css_matrix
)
}
list(model1) %>%
purrr::map( add_reference_levels ) %>%
purrr::map( tidy_up_model_df     ) %>%
purrr::map( to_html              )
(model1) %>%
purrr::map( add_reference_levels ) %>%
purrr::map( tidy_up_model_df     ) %>%
purrr::map( to_html              )
# if(  ! "list" %in% class(univariate_models_list) ) {
#   univariate_models_list <- list(univariate_models_list)
# }
model_to_html <- function( univariate_models_list, simple = TRUE, decimals_estimate = 2 ) {
if(  ! "list" %in% class(univariate_models_list) ) { # input must be list dont know why
univariate_models_list <- list(univariate_models_list)
}
# if(model_class == "coxph") {
#   purrr::map( univariate_models_list, class ) %>%
#    purrr::map( function(x) "coxph" %in% x ) %>%
#    unlist() %>%
#    all() -> are_all_models_coxph
#  if(! are_all_models_coxph ) stop ("When model_class is 'coxph' all models in univariate_models_list must be class 'coxph' ")
# }
tidy_up_model_df <- function(univariate_models) {
univariate_models %>%
transmute( variables,
categories,
estimate = format( round( estimate, decimals_estimate ), nsmall = decimals_estimate),
CI = paste0( format( round( conf.low,  decimals_estimate ), nsmall = decimals_estimate),
"-",
format( round( conf.high, decimals_estimate ), nsmall = decimals_estimate ) )
)  -> tidy_model
tidy_model$estimate[ stringr::str_detect(  string = tidy_model$estimate,  pattern =  "NA") ] <- "1"
tidy_model$CI[ stringr::str_detect(  string = tidy_model$CI,  pattern =  "NA") ]             <- "Ref"
tidy_model
}
to_html <- function(tidy_model) {
rgroup_vector       <-   stringr::str_to_title( rle(tidy_model$variables)$values )
n_rgroup_vector     <-   rle(tidy_model$variables)$lengths
rgroup_vector[ n_rgroup_vector == 1 ]   <- "&nbsp;" # single rows dont need rgroup header
css_rgroup      <- "font-style: italic;padding-top: 0.4cm;padding-right: 0.4cm;padding-bottom: 0.2cm;"
tidy_model      <- tidy_model[,-1]
css_matrix      <- matrix(data = "padding-left: 0.5cm; padding-right: 0.5cm;",
nrow = nrow(tidy_model),
ncol = ncol(tidy_model))
css_matrix[, 1] <- "padding-left: 0.4cm; padding-right: 0.3cm;"
htmlTable::htmlTable(
x          = tidy_model ,
rnames     = FALSE,
rgroup     = rgroup_vector,
n.rgroup   = n_rgroup_vector,
align      = c("l","r"),
css.rgroup = css_rgroup,
css.cell   = css_matrix
)
}
univariate_models_list %>%
purrr::map( add_reference_levels ) %>%
purrr::map( tidy_up_model_df     ) %>%
purrr::map( to_html              )
}
(model1) %>%
purrr::map( add_reference_levels ) %>%
purrr::map( tidy_up_model_df     ) %>%
purrr::map( to_html              )
install.packages("testthat")
roxygen2::roxygenise()
library(testthat)
install.packages("testthat")
library(testthat)
