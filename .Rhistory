include_total = TRUE, include_subtotal = TRUE, include_cumpct = FALSE, include_p_value = FALSE )
freq_by2 <- function(dataset, var_vector, by_group = NULL, include_total = TRUE, min_cell_count = 10, htmlout = TRUE, font_css = "font-family: monospace;",
include_p_value = FALSE,
decimal_percent = 0,
include_n = TRUE, include_percent = TRUE,
include_cumpct = FALSE, include_cumsum = FALSE, include_subtotal = FALSE, include_n_missing = FALSE) {
by_group_symbol         <- rlang::sym(by_group)
var_vector_numeric      <- dataset[, var_vector ] %>% dplyr::select_if( is.numeric ) %>% names()
var_vector_char         <- dataset[, var_vector ] %>% dplyr::select_if( function(x) is.factor(x) | is.character(x) ) %>% names()
# check
dataset %>% select_if(is.numeric) %>% names()  %>% paste0( collapse = " , ") -> are_numeric
all_char_or_factor <- dataset %>% select( UQS(rlang::syms(var_vector)) )  %>%  map( function(x) any(c("character", "factor", "ordered") %in%  class(x)  ) ) %>% as.logical() %>% all()
if(! all_char_or_factor  )  stop("var_vector must refer to columns of class character, factor or ordered.", are_numeric, "are not ")
freq_fun <- function(dataset, var_vector_char_element) {
char_element_symbol  <-  rlang::sym(var_vector_char_element)
by_group_vector          <-  dataset               %>% pull(UQ(by_group_symbol))
var_vector_element_pull  <-  dataset               %>% pull(UQ(var_vector_char_element))
# test
chi_test               <- chisq.test( x = by_group_vector, y = var_vector_element_pull  ) %>% tidy()
chi_test$var_vector    <- var_vector_char_element
# count
dataset %>% count(UQ(by_group_symbol), UQ(char_element_symbol)) %>% complete( UQ(by_group_symbol), UQ(char_element_symbol), fill = list( n = 0 )) %>%
group_by(UQ(by_group_symbol)) %>%
mutate( "group" = UQ(by_group_symbol)[1],
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " )
) %>% ungroup() %>%
transmute(     group,  covariate, category,            n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c(TRUE, TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing ))  %>%
plyr::dlply( .variables = "group", function(x) {
names(x)[4:length(names(x))]   <-  paste0( x$group[1], "_", names(x)[4:length(names(x))] )            # The first 3 names group, covariate, category are not changed.
x <- x[,-1]
}   ) %>%
Reduce( function(x, y) left_join(x, y, by = c("covariate", "category" )), . ) -> freq_fun_output
if(include_p_value) {
freq_fun_output$pvalue <- NA
freq_fun_output$pvalue[1] <- base::format.pval( chi_test$p.value )
}
# freq_fun_total (defined inside freq_fun_by )
freq_fun_total <- function(dataset, var_vector_char_element) {
# count
dataset %>% count( UQ(char_element_symbol)) %>% complete( UQ(char_element_symbol), fill = list( n = 0 )) %>%
mutate(
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup() %>%
transmute(      covariate, category,          n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c( TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )) %>%
ungroup()    ->    freq_fun_total_output
} # end of freq fun total (defined inside freq_fun)
# apply freq_fun_total
freq_fun_total(dataset, var_vector_char_element) -> freq_fun_total_output
names(freq_fun_total_output)       <- paste0(names(freq_fun_total_output), "_total") # paste "_total" to names
names(freq_fun_total_output)[1:2]  <- c("covariate", "category")
if (include_total ) {
dplyr::full_join(freq_fun_total_output, freq_fun_output, by = c("covariate", "category") ) -> freq_fun_output
}
freq_fun_output # is the only object returned from the function
}# end of freq_fun freq_fun_total
var_vector %>%
purrr::map(  function(x) freq_fun(dataset, x) ) %>% bind_rows() -> table1
# freq_fun_output
header_total <- c("n",                   "%", "Cum. n", "Cum. %", "Subtotal" , "n missing")
header_total <- header_total[ c(include_n, include_percent, include_cumsum, include_cumpct, include_subtotal, include_n_missing ) ]
levels_group           <-  dataset               %>% pull(UQ(by_group_symbol))
any_na_in_by_group     <-  dataset               %>% pull(UQ(by_group_symbol)) %>% anyNA()
if(any_na_in_by_group){
levels_group <- levels_group %>% levels() %>% as.character()
levels_group <- c(levels_group, "Missing" )
} else {
levels_group <- levels_group %>% levels() %>% as.character()
}
html_col_header  <- c(" ", header_total, rep( header_total, times = length(levels_group)) )
if (include_p_value) {
html_col_header  <- c( html_col_header, "p-value")
}
c_group    <-  levels_group
if (include_total) {
c_group  <- c(" ", "Total", levels_group) } else {
c_group <- c(" ", levels_group )
}
if ( include_total ) {
c_group_len <- c(1, length(header_total), rep( length(header_total), times = length(levels_group)) )
} else {
c_group_len <- c(1, rep( length(header_total), times = length(levels_group)) )
}
if (include_p_value) {
c_group_len[ length(c_group_len ) ] <-   c_group_len[ length(c_group_len ) ]  + 1
}
rle_vector <- rle( as.character(table1$covariate) )
rgroup_vector <- rle_vector$values
rgroup_vector <- stringr::str_to_title(rgroup_vector)
n_rgroup_vector <- rle_vector$lengths
alignment  <- c("l", rep("r", ncol(table1) - 1 ))
list(table1, html_col_header, c_group, c_group_len )
table1         <- table1[,-1]
names(table1)  <- html_col_header
css_matrix     <- matrix(data     = "padding-left: 0.5cm; padding-right: 0.5cm;",
nrow     = nrow(table1),
ncol     = ncol(table1))
css_matrix[, 1]   <- "padding-left: 0.4cm; padding-right: 0.3cm;"
htmlTable::htmlTable( x = table1, rnames = FALSE,
rgroup = rgroup_vector,
n.rgroup = n_rgroup_vector,
cgroup   = c_group,
n.cgroup = c_group_len,
align    = alignment,
css.rgroup = "font-style: italic;padding-top: 0.4cm;padding-right: 0.4cm;padding-bottom: 0.2cm;",
css.cell   = css_matrix,
pos.caption = "top"
)
}
freq_by2( dataset = diamonds, var_vector = c("color", "clarity", "table" ), by_group = "cut",
include_total = TRUE, include_subtotal = TRUE, include_cumpct = FALSE, include_p_value = FALSE )
freq_by2 <- function(dataset, var_vector, by_group = NULL, include_total = TRUE, min_cell_count = 10, htmlout = TRUE, font_css = "font-family: monospace;",
include_p_value = FALSE,
decimal_percent = 0,
include_n = TRUE, include_percent = TRUE,
include_cumpct = FALSE, include_cumsum = FALSE, include_subtotal = FALSE, include_n_missing = FALSE) {
by_group_symbol         <- rlang::sym(by_group)
var_vector_numeric      <- dataset[, var_vector ] %>% dplyr::select_if( is.numeric ) %>% names()
var_vector_char         <- dataset[, var_vector ] %>% dplyr::select_if( function(x) is.factor(x) | is.character(x) ) %>% names()
# check
dataset %>% select_if(is.numeric) %>% names()  %>% paste0( collapse = " , ") -> are_numeric
all_char_or_factor <- dataset %>% select( UQS(rlang::syms(var_vector)) )  %>%  map( function(x) any(c("character", "factor", "ordered") %in%  class(x)  ) ) %>% as.logical() %>% all()
if(! all_char_or_factor  )  stop("var_vector must refer to columns of class character, factor or ordered. The following are not: ", are_numeric)
freq_fun <- function(dataset, var_vector_char_element) {
char_element_symbol  <-  rlang::sym(var_vector_char_element)
by_group_vector          <-  dataset               %>% pull(UQ(by_group_symbol))
var_vector_element_pull  <-  dataset               %>% pull(UQ(var_vector_char_element))
# test
chi_test               <- chisq.test( x = by_group_vector, y = var_vector_element_pull  ) %>% tidy()
chi_test$var_vector    <- var_vector_char_element
# count
dataset %>% count(UQ(by_group_symbol), UQ(char_element_symbol)) %>% complete( UQ(by_group_symbol), UQ(char_element_symbol), fill = list( n = 0 )) %>%
group_by(UQ(by_group_symbol)) %>%
mutate( "group" = UQ(by_group_symbol)[1],
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " )
) %>% ungroup() %>%
transmute(     group,  covariate, category,            n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c(TRUE, TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing ))  %>%
plyr::dlply( .variables = "group", function(x) {
names(x)[4:length(names(x))]   <-  paste0( x$group[1], "_", names(x)[4:length(names(x))] )            # The first 3 names group, covariate, category are not changed.
x <- x[,-1]
}   ) %>%
Reduce( function(x, y) left_join(x, y, by = c("covariate", "category" )), . ) -> freq_fun_output
if(include_p_value) {
freq_fun_output$pvalue <- NA
freq_fun_output$pvalue[1] <- base::format.pval( chi_test$p.value )
}
# freq_fun_total (defined inside freq_fun_by )
freq_fun_total <- function(dataset, var_vector_char_element) {
# count
dataset %>% count( UQ(char_element_symbol)) %>% complete( UQ(char_element_symbol), fill = list( n = 0 )) %>%
mutate(
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup() %>%
transmute(      covariate, category,          n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c( TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )) %>%
ungroup()    ->    freq_fun_total_output
} # end of freq fun total (defined inside freq_fun)
# apply freq_fun_total
freq_fun_total(dataset, var_vector_char_element) -> freq_fun_total_output
names(freq_fun_total_output)       <- paste0(names(freq_fun_total_output), "_total") # paste "_total" to names
names(freq_fun_total_output)[1:2]  <- c("covariate", "category")
if (include_total ) {
dplyr::full_join(freq_fun_total_output, freq_fun_output, by = c("covariate", "category") ) -> freq_fun_output
}
freq_fun_output # is the only object returned from the function
}# end of freq_fun freq_fun_total
var_vector %>%
purrr::map(  function(x) freq_fun(dataset, x) ) %>% bind_rows() -> table1
# freq_fun_output
header_total <- c("n",                   "%", "Cum. n", "Cum. %", "Subtotal" , "n missing")
header_total <- header_total[ c(include_n, include_percent, include_cumsum, include_cumpct, include_subtotal, include_n_missing ) ]
levels_group           <-  dataset               %>% pull(UQ(by_group_symbol))
any_na_in_by_group     <-  dataset               %>% pull(UQ(by_group_symbol)) %>% anyNA()
if(any_na_in_by_group){
levels_group <- levels_group %>% levels() %>% as.character()
levels_group <- c(levels_group, "Missing" )
} else {
levels_group <- levels_group %>% levels() %>% as.character()
}
html_col_header  <- c(" ", header_total, rep( header_total, times = length(levels_group)) )
if (include_p_value) {
html_col_header  <- c( html_col_header, "p-value")
}
c_group    <-  levels_group
if (include_total) {
c_group  <- c(" ", "Total", levels_group) } else {
c_group <- c(" ", levels_group )
}
if ( include_total ) {
c_group_len <- c(1, length(header_total), rep( length(header_total), times = length(levels_group)) )
} else {
c_group_len <- c(1, rep( length(header_total), times = length(levels_group)) )
}
if (include_p_value) {
c_group_len[ length(c_group_len ) ] <-   c_group_len[ length(c_group_len ) ]  + 1
}
rle_vector <- rle( as.character(table1$covariate) )
rgroup_vector <- rle_vector$values
rgroup_vector <- stringr::str_to_title(rgroup_vector)
n_rgroup_vector <- rle_vector$lengths
alignment  <- c("l", rep("r", ncol(table1) - 1 ))
list(table1, html_col_header, c_group, c_group_len )
table1         <- table1[,-1]
names(table1)  <- html_col_header
css_matrix     <- matrix(data     = "padding-left: 0.5cm; padding-right: 0.5cm;",
nrow     = nrow(table1),
ncol     = ncol(table1))
css_matrix[, 1]   <- "padding-left: 0.4cm; padding-right: 0.3cm;"
htmlTable::htmlTable( x = table1, rnames = FALSE,
rgroup = rgroup_vector,
n.rgroup = n_rgroup_vector,
cgroup   = c_group,
n.cgroup = c_group_len,
align    = alignment,
css.rgroup = "font-style: italic;padding-top: 0.4cm;padding-right: 0.4cm;padding-bottom: 0.2cm;",
css.cell   = css_matrix,
pos.caption = "top"
)
}
freq_by2( dataset = diamonds, var_vector = c("color", "clarity", "table" ), by_group = "cut",
include_total = TRUE, include_subtotal = TRUE, include_cumpct = FALSE, include_p_value = FALSE )
freq_by2 <- function(dataset, var_vector, by_group = NULL, include_total = TRUE, min_cell_count = 10, htmlout = TRUE, font_css = "font-family: monospace;",
include_p_value = FALSE,
decimal_percent = 0,
include_n = TRUE, include_percent = TRUE,
include_cumpct = FALSE, include_cumsum = FALSE, include_subtotal = FALSE, include_n_missing = FALSE) {
by_group_symbol         <- rlang::sym(by_group)
var_vector_numeric      <- dataset[, var_vector ] %>% dplyr::select_if( is.numeric ) %>% names()
var_vector_char         <- dataset[, var_vector ] %>% dplyr::select_if( function(x) is.factor(x) | is.character(x) ) %>% names()
# check
dataset %>% select_if(is.numeric) %>% names()  %>% paste0( collapse = ", ") -> are_numeric
all_char_or_factor <- dataset %>% select( UQS(rlang::syms(var_vector)) )  %>%  map( function(x) any(c("character", "factor", "ordered") %in%  class(x)  ) ) %>% as.logical() %>% all()
if(! all_char_or_factor  )  stop("var_vector must refer to columns of class character, factor or ordered. The following are not: ", are_numeric)
freq_fun <- function(dataset, var_vector_char_element) {
char_element_symbol  <-  rlang::sym(var_vector_char_element)
by_group_vector          <-  dataset               %>% pull(UQ(by_group_symbol))
var_vector_element_pull  <-  dataset               %>% pull(UQ(var_vector_char_element))
# test
chi_test               <- chisq.test( x = by_group_vector, y = var_vector_element_pull  ) %>% tidy()
chi_test$var_vector    <- var_vector_char_element
# count
dataset %>% count(UQ(by_group_symbol), UQ(char_element_symbol)) %>% complete( UQ(by_group_symbol), UQ(char_element_symbol), fill = list( n = 0 )) %>%
group_by(UQ(by_group_symbol)) %>%
mutate( "group" = UQ(by_group_symbol)[1],
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " )
) %>% ungroup() %>%
transmute(     group,  covariate, category,            n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c(TRUE, TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing ))  %>%
plyr::dlply( .variables = "group", function(x) {
names(x)[4:length(names(x))]   <-  paste0( x$group[1], "_", names(x)[4:length(names(x))] )            # The first 3 names group, covariate, category are not changed.
x <- x[,-1]
}   ) %>%
Reduce( function(x, y) left_join(x, y, by = c("covariate", "category" )), . ) -> freq_fun_output
if(include_p_value) {
freq_fun_output$pvalue <- NA
freq_fun_output$pvalue[1] <- base::format.pval( chi_test$p.value )
}
# freq_fun_total (defined inside freq_fun_by )
freq_fun_total <- function(dataset, var_vector_char_element) {
# count
dataset %>% count( UQ(char_element_symbol)) %>% complete( UQ(char_element_symbol), fill = list( n = 0 )) %>%
mutate(
"covariate"    = var_vector_char_element,
"category"     = UQ(char_element_symbol),
"pct"          = paste0( round( 100 * n / sum(n), decimal_percent), "%" ),
"cumpct"       = paste0( round( 100 * cumsum(n) / sum(n), decimal_percent), "%" ),
"cumsum"       = prettyNum(cumsum(n), big.mark = " " ),
"subtotal"     = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( sum(n), big.mark = " "), no = NA),
"n_missing"    = ifelse(  dplyr::row_number(covariate)==1, yes = prettyNum( n[ rlang::are_na( category) ], big.mark = " "), no = NA),
"n"            = prettyNum(n, big.mark = " " ) ) %>%
ungroup() %>%
transmute(      covariate, category,          n,             pct,         cumpct,         cumsum,         subtotal,         n_missing )  %>%
# selecting the columns
select_if(    c( TRUE      , TRUE    ,    include_n, include_percent, include_cumpct, include_cumsum, include_subtotal, include_n_missing )) %>%
ungroup()    ->    freq_fun_total_output
} # end of freq fun total (defined inside freq_fun)
# apply freq_fun_total
freq_fun_total(dataset, var_vector_char_element) -> freq_fun_total_output
names(freq_fun_total_output)       <- paste0(names(freq_fun_total_output), "_total") # paste "_total" to names
names(freq_fun_total_output)[1:2]  <- c("covariate", "category")
if (include_total ) {
dplyr::full_join(freq_fun_total_output, freq_fun_output, by = c("covariate", "category") ) -> freq_fun_output
}
freq_fun_output # is the only object returned from the function
}# end of freq_fun freq_fun_total
var_vector %>%
purrr::map(  function(x) freq_fun(dataset, x) ) %>% bind_rows() -> table1
# freq_fun_output
header_total <- c("n",                   "%", "Cum. n", "Cum. %", "Subtotal" , "n missing")
header_total <- header_total[ c(include_n, include_percent, include_cumsum, include_cumpct, include_subtotal, include_n_missing ) ]
levels_group           <-  dataset               %>% pull(UQ(by_group_symbol))
any_na_in_by_group     <-  dataset               %>% pull(UQ(by_group_symbol)) %>% anyNA()
if(any_na_in_by_group){
levels_group <- levels_group %>% levels() %>% as.character()
levels_group <- c(levels_group, "Missing" )
} else {
levels_group <- levels_group %>% levels() %>% as.character()
}
html_col_header  <- c(" ", header_total, rep( header_total, times = length(levels_group)) )
if (include_p_value) {
html_col_header  <- c( html_col_header, "p-value")
}
c_group    <-  levels_group
if (include_total) {
c_group  <- c(" ", "Total", levels_group) } else {
c_group <- c(" ", levels_group )
}
if ( include_total ) {
c_group_len <- c(1, length(header_total), rep( length(header_total), times = length(levels_group)) )
} else {
c_group_len <- c(1, rep( length(header_total), times = length(levels_group)) )
}
if (include_p_value) {
c_group_len[ length(c_group_len ) ] <-   c_group_len[ length(c_group_len ) ]  + 1
}
rle_vector <- rle( as.character(table1$covariate) )
rgroup_vector <- rle_vector$values
rgroup_vector <- stringr::str_to_title(rgroup_vector)
n_rgroup_vector <- rle_vector$lengths
alignment  <- c("l", rep("r", ncol(table1) - 1 ))
list(table1, html_col_header, c_group, c_group_len )
table1         <- table1[,-1]
names(table1)  <- html_col_header
css_matrix     <- matrix(data     = "padding-left: 0.5cm; padding-right: 0.5cm;",
nrow     = nrow(table1),
ncol     = ncol(table1))
css_matrix[, 1]   <- "padding-left: 0.4cm; padding-right: 0.3cm;"
htmlTable::htmlTable( x = table1, rnames = FALSE,
rgroup = rgroup_vector,
n.rgroup = n_rgroup_vector,
cgroup   = c_group,
n.cgroup = c_group_len,
align    = alignment,
css.rgroup = "font-style: italic;padding-top: 0.4cm;padding-right: 0.4cm;padding-bottom: 0.2cm;",
css.cell   = css_matrix,
pos.caption = "top"
)
}
freq_by2( dataset = diamonds, var_vector = c("color", "clarity", "table" ), by_group = "cut",
include_total = TRUE, include_subtotal = TRUE, include_cumpct = FALSE, include_p_value = FALSE )
freq_by2( dataset = diamonds, var_vector = c("color",  "table" ), by_group = "clarity",
include_total = TRUE, include_subtotal = TRUE, include_cumpct = FALSE, include_p_value = FALSE )
freq_by2( dataset = diamonds, var_vector = c("color"), by_group = "clarity",
include_total = TRUE, include_subtotal = TRUE, include_cumpct = FALSE, include_p_value = FALSE )
freq_by2( dataset = diamonds, var_vector = c("color"), by_group = "clarity",
include_total = TRUE, include_subtotal = TRUE, include_cumpct = FALSE, include_p_value = FALSE ) -> output
temp <-   tempfile( pattern = "asdf", fileext = ".html")
write_file(  x = output, path = temp)
utils::browseURL(temp)
freq_by2( dataset = diamonds, var_vector = c("color", "cut"), by_group = "clarity",
include_total = TRUE, include_subtotal = TRUE, include_cumpct = FALSE, include_p_value = FALSE ) -> output
temp <-   tempfile( pattern = "asdf", fileext = ".html")
write_file(  x = output, path = temp)
utils::browseURL(temp)
freq_by2( dataset = diamonds, var_vector = c("color", "cut"), by_group = "clarity",
include_total = TRUE, include_subtotal = FALSE, include_cumpct = FALSE, include_p_value = FALSE ) -> output
temp <-   tempfile( pattern = "asdf", fileext = ".html")
write_file(  x = output, path = temp)
utils::browseURL(temp)
diamonds %>% count(cut)
diamonds %>% count(cut)         -> t1
htmlTable(t1) -> output
temp <-   tempfile( pattern = "asdf", fileext = ".html")
write_file(  x = output, path = temp)
utils::browseURL(temp)
diamonds %>% group_by(cut, color)
diamonds %>% count(cut, color)
iris %>% mutate( nn = n() )
iris %>% group_by(Species) %>% mutate( nn = n() )
iris %>% group_by(Species) mutate_if( .predicate = n() < 10, .funs = list( function(x) paste0(x, "asdf")))
iris %>% group_by(Species) %>% mutate_if( .predicate = n() < 10, .funs = list( function(x) paste0(x, "asdf")))
iris %>% group_by(Species) %>% mutate_if( .predicate = n(.) < 10, .funs = list( function(x) paste0(x, "asdf")))
iris %>% group_by(Species)  %>% mutate( nn = n() )
iris %>% group_by(Species)  %>% mutate( nn = n())
iris %>% group_by(Species)  %>% mutate( nn = n())  %>% mutate( Species = case_when( nn <= 10 ~ NA ) )
iris %>% group_by(Species)  %>% mutate( nn = n()) %>% ungroup() %>% mutate( Species = case_when( nn <= 10 ~ NA ) )
iris %>% group_by(Species)  %>% mutate( nn = n()) %>% ungroup() %>% mutate( Species = case_when( nn <= 10 ~ NA,
nn > 10 ~ Species) )
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
source('C:/Users/rasmu/Desktop/epitable/R/freq_by2.R', echo=TRUE)
iris %>% group_by(Species)  %>% mutate( nn = n()) %>% ungroup() %>% mutate( Species = if_else( nn <= 10, true = NA, Species))
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup()
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup() %>% mutate( Species = if_else( nn <= 10, true = NA, false = Species))
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup() %>% mutate( Species = if_else( nn <= 10, true = NA ))
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup()
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup() %>% mutate( Species = if_else( nn <= 49, true = NA ))
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup() %>% mutate( Species = if_else( nn <= 49, true = NA, Species ))
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup() %>% mutate( Species = if_else( nn <= 49, true = NA, 10 ))
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup() %>% mutate( Species = if_else( nn <= 49, true = NA, false = "asdf" ))
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup()
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup() %>% mutate( asdf = if_else( nn <= 49, true = NA, false = "asdf" ))
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup() %>% mutate( asdf = if_else( nn <= 49, false = "asdf", true = "22323" ))
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup() %>% mutate( asdf = if_else( nn <= 49, false = "asdf", true = "22323" ))
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup() %>% mutate( asdf = if_else( nn <= 10 , false = "asdf", true = "22323" ))
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup() %>% mutate( Species = if_else( nn <= 10 , false = "asdf", true = "22323" ))
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup() %>% mutate( Species = if_else( nn <= 10 , false = NA, true = Species ))
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup() %>% mutate( Species = if_else( nn <= 10 , false  = NA_integer_, true = Species,  ))
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup() %>% mutate( Species = if_else( nn <= 10 , true  = NA_integer_, false = Species,  ))
iris %>% mutate_if(is.factor, as.character) %>%
mutate(Species = ifelse(Species == 'virginica', 'virg.', Species))
library(dplyr)
library(tidyverse)
iris %>% mutate_if(is.factor, as.character) %>%
mutate(Species = ifelse(Species == 'virginica', 'virg.', Species))
iris %>% mutate_if(is.factor, as.character) %>%
mutate(Species = ifelse(Species == 'virginica', NA, Species))
iris %>% mutate_if(is.factor, as.character) %>%
mutate(Species = if_else(Species == 'virginica', NA, Species))
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup() %>% mutate( Species = if_else( nn <= 10 , true  = NA, false = Species,  ))
library(sqldf)
install.packages("sqldf")
library(sqldf)
f1 <- function(dataset) {
sqldf("select * from dataset where Species=='setosa'   ")
}
mutate(iris, Species = if_else(coalesce(Species=="setosa", FALSE), true = "cigarettes", false = Species))
f1 <- function(dataset) {
sqldf("select * from dataset where Species=='setosa'   ")
}
f1( iris)
df <- sample_n(iris, 15)
df
df <- sample_n(iris, 15) %>% arrange(Species)
df
df
f1( df)
f1 <- function(dataset,var1) {
sqldf("select * from dataset where Species=='setosa'   ")
}
f1( df)
f1 <- function(dataset,var1) {
sqldf("select * from dataset where Species==var1   ")
}
f1( df, "setosa")
f1 <- function(dataset,var1) {
fn$sqldf("select * from dataset where Species==$var1   ")
}
f1( df, "setosa")
sqldf(" select [Sepal.Width] from Species limit 5")
sqldf(" select [Sepal.Width] from iris limit 5")
sqldf(" select case
when [Sepal.Width] == 3 then null
else [Sepal.Width]
end as [Sepal.Width] from iris limit 5")
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup() %>% mutate( Species = replace( Species, nn <=, NA ) )
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup() %>% mutate( Species = replace( Species, nn <=10, NA ) )
iris %>% group_by(Species)  %>%
mutate( nn = n()) %>% ungroup() %>% mutate( Species = replace( Species, nn <=60, NA ) )
